/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package librarytest

import (
	"fmt"
	"math"
	"thrift"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type IReverseOrderService interface {
	/**
	 * Parameters:
	 *  - First
	 *  - Second
	 *  - Third
	 *  - Fourth
	 */
	MyMethod(first string, second int16, third int32, fourth int64) (err error)
}

type ReverseOrderServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewReverseOrderServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ReverseOrderServiceClient {
	return &ReverseOrderServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewReverseOrderServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ReverseOrderServiceClient {
	return &ReverseOrderServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Parameters:
 *  - First
 *  - Second
 *  - Third
 *  - Fourth
 */
func (p *ReverseOrderServiceClient) MyMethod(first string, second int16, third int32, fourth int64) (err error) {
	err = p.SendMyMethod(first, second, third, fourth)
	if err != nil {
		return
	}
	return p.RecvMyMethod()
}

func (p *ReverseOrderServiceClient) SendMyMethod(first string, second int16, third int32, fourth int64) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("myMethod", thrift.CALL, p.SeqId)
	args1600 := NewMyMethodArgs()
	args1600.First = first
	args1600.Second = second
	args1600.Third = third
	args1600.Fourth = fourth
	err = args1600.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *ReverseOrderServiceClient) RecvMyMethod() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1602 := thrift.NewTApplicationExceptionDefault()
		var error1603 error
		error1603, err = error1602.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1603
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1601 := NewMyMethodResult()
	err = result1601.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type ReverseOrderServiceProcessor struct {
	handler      IReverseOrderService
	processorMap map[string]thrift.TProcessorFunction
}

func (p *ReverseOrderServiceProcessor) Handler() IReverseOrderService {
	return p.handler
}

func (p *ReverseOrderServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ReverseOrderServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *ReverseOrderServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewReverseOrderServiceProcessor(handler IReverseOrderService) *ReverseOrderServiceProcessor {

	self1604 := &ReverseOrderServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self1604.processorMap["myMethod"] = &reverseOrderServiceProcessorMyMethod{handler: handler}
	return self1604
}

func (p *ReverseOrderServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x1605 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x1605.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x1605
	}
	return process.Process(seqId, iprot, oprot)
}

type reverseOrderServiceProcessorMyMethod struct {
	handler IReverseOrderService
}

func (p *reverseOrderServiceProcessorMyMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMyMethodArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("myMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMyMethodResult()
	if err = p.handler.MyMethod(args.First, args.Second, args.Third, args.Fourth); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing myMethod: "+err.Error())
		oprot.WriteMessageBegin("myMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("myMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - First
 *  - Second
 *  - Third
 *  - Fourth
 */
type MyMethodArgs struct {
	Fourth int64  "fourth" // 1
	Third  int32  "third"  // 2
	Second int16  "second" // 3
	First  string "first"  // 4
}

var tstructMyMethodArgs = thrift.NewTStruct("myMethod_args", []thrift.TField{
	thrift.NewTField("first", thrift.STRING, 4),
	thrift.NewTField("second", thrift.I16, 3),
	thrift.NewTField("third", thrift.I32, 2),
	thrift.NewTField("fourth", thrift.I64, 1),
})

func (*MyMethodArgs) GetTStruct() thrift.TStruct { return tstructMyMethodArgs }
func NewMyMethodArgs() *MyMethodArgs {
	output := &MyMethodArgs{}
	{
	}
	return output
}

func (p *MyMethodArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMyMethodArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructMyMethodArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructMyMethodArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 4 || fieldName == "first" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "second" {
			if fieldTypeId == thrift.I16 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "third" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "fourth" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1606, err1607 := iprot.ReadString()
	if err1607 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "first", p.ThriftName(), err1607)
	}
	p.First = v1606
	return err
}

func (p *MyMethodArgs) ReadFieldFirst(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *MyMethodArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1608, err1609 := iprot.ReadI16()
	if err1609 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "second", p.ThriftName(), err1609)
	}
	p.Second = v1608
	return err
}

func (p *MyMethodArgs) ReadFieldSecond(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *MyMethodArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1610, err1611 := iprot.ReadI32()
	if err1611 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "third", p.ThriftName(), err1611)
	}
	p.Third = v1610
	return err
}

func (p *MyMethodArgs) ReadFieldThird(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *MyMethodArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1612, err1613 := iprot.ReadI64()
	if err1613 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "fourth", p.ThriftName(), err1613)
	}
	p.Fourth = v1612
	return err
}

func (p *MyMethodArgs) ReadFieldFourth(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MyMethodArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("myMethod_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("fourth", thrift.I64, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Fourth))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) WriteFieldFourth(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MyMethodArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("third", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Third))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) WriteFieldThird(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *MyMethodArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("second", thrift.I16, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.Second))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) WriteFieldSecond(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *MyMethodArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("first", thrift.STRING, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.First))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodArgs) WriteFieldFirst(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *MyMethodArgs) TStructName() string {
	return "MyMethodArgs"
}

func (p *MyMethodArgs) ThriftName() string {
	return "myMethod_args"
}

func (p *MyMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyMethodArgs(%+v)", *p)
}

func (p *MyMethodArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MyMethodArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MyMethodArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 4:
		return p.First
	case 3:
		return p.Second
	case 2:
		return p.Third
	case 1:
		return p.Fourth
	}
	return nil
}

func (p *MyMethodArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("first", thrift.STRING, 4),
		thrift.NewTField("second", thrift.I16, 3),
		thrift.NewTField("third", thrift.I32, 2),
		thrift.NewTField("fourth", thrift.I64, 1),
	})
}

type MyMethodResult struct {
}

var tstructMyMethodResult = thrift.NewTStruct("myMethod_result", []thrift.TField{})

func (*MyMethodResult) GetTStruct() thrift.TStruct { return tstructMyMethodResult }
func NewMyMethodResult() *MyMethodResult {
	output := &MyMethodResult{}
	{
	}
	return output
}

func (p *MyMethodResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMyMethodResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructMyMethodResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructMyMethodResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("myMethod_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MyMethodResult) TStructName() string {
	return "MyMethodResult"
}

func (p *MyMethodResult) ThriftName() string {
	return "myMethod_result"
}

func (p *MyMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyMethodResult(%+v)", *p)
}

func (p *MyMethodResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MyMethodResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MyMethodResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *MyMethodResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}
