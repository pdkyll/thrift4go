/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package librarytest

import (
	"fmt"
	"math"
	"thrift"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type SomeEnum int64

const (
	SomeEnum_ONE SomeEnum = 1
	SomeEnum_TWO SomeEnum = 2
)

func (p SomeEnum) String() string {
	switch p {
	case SomeEnum_ONE:
		return "SomeEnum_ONE"
	case SomeEnum_TWO:
		return "SomeEnum_TWO"
	}
	return "<UNSET>"
}

func FromSomeEnumString(s string) SomeEnum {
	switch s {
	case "SomeEnum_ONE":
		return SomeEnum_ONE
	case "SomeEnum_TWO":
		return SomeEnum_TWO
	}
	return SomeEnum(-10000)
}

func (p SomeEnum) Value() int {
	return int(p)
}

func (p SomeEnum) IsEnum() bool {
	return true
}

type SomeMap thrift.TMap

/**
 * Attributes:
 *  - Nan
 *  - Inf
 *  - Neginf
 *  - Repeating
 *  - Big
 *  - Small
 *  - Zero
 *  - Negzero
 */
type Doubles struct {
	Nan       float64 "nan"       // 1
	Inf       float64 "inf"       // 2
	Neginf    float64 "neginf"    // 3
	Repeating float64 "repeating" // 4
	Big       float64 "big"       // 5
	Small     float64 "small"     // 6
	Zero      float64 "zero"      // 7
	Negzero   float64 "negzero"   // 8
}

var tstructDoubles = thrift.NewTStruct("Doubles", []thrift.TField{
	thrift.NewTField("nan", thrift.DOUBLE, 1),
	thrift.NewTField("inf", thrift.DOUBLE, 2),
	thrift.NewTField("neginf", thrift.DOUBLE, 3),
	thrift.NewTField("repeating", thrift.DOUBLE, 4),
	thrift.NewTField("big", thrift.DOUBLE, 5),
	thrift.NewTField("small", thrift.DOUBLE, 6),
	thrift.NewTField("zero", thrift.DOUBLE, 7),
	thrift.NewTField("negzero", thrift.DOUBLE, 8),
})

func (*Doubles) GetTStruct() thrift.TStruct { return tstructDoubles }
func NewDoubles() *Doubles {
	output := &Doubles{}
	{
	}
	return output
}

func (p *Doubles) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDoubles.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructDoubles.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructDoubles.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "nan" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "inf" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "neginf" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "repeating" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "big" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "small" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "zero" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "negzero" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v0, err1 := iprot.ReadDouble()
	if err1 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "nan", p.ThriftName(), err1)
	}
	p.Nan = v0
	return err
}

func (p *Doubles) ReadFieldNan(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Doubles) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v2, err3 := iprot.ReadDouble()
	if err3 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "inf", p.ThriftName(), err3)
	}
	p.Inf = v2
	return err
}

func (p *Doubles) ReadFieldInf(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Doubles) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v4, err5 := iprot.ReadDouble()
	if err5 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "neginf", p.ThriftName(), err5)
	}
	p.Neginf = v4
	return err
}

func (p *Doubles) ReadFieldNeginf(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *Doubles) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v6, err7 := iprot.ReadDouble()
	if err7 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "repeating", p.ThriftName(), err7)
	}
	p.Repeating = v6
	return err
}

func (p *Doubles) ReadFieldRepeating(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *Doubles) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v8, err9 := iprot.ReadDouble()
	if err9 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "big", p.ThriftName(), err9)
	}
	p.Big = v8
	return err
}

func (p *Doubles) ReadFieldBig(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *Doubles) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v10, err11 := iprot.ReadDouble()
	if err11 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "small", p.ThriftName(), err11)
	}
	p.Small = v10
	return err
}

func (p *Doubles) ReadFieldSmall(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *Doubles) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v12, err13 := iprot.ReadDouble()
	if err13 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "zero", p.ThriftName(), err13)
	}
	p.Zero = v12
	return err
}

func (p *Doubles) ReadFieldZero(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *Doubles) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v14, err15 := iprot.ReadDouble()
	if err15 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "negzero", p.ThriftName(), err15)
	}
	p.Negzero = v14
	return err
}

func (p *Doubles) ReadFieldNegzero(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *Doubles) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Doubles")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("nan", thrift.DOUBLE, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Nan))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "nan", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldNan(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Doubles) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("inf", thrift.DOUBLE, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Inf))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "inf", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldInf(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Doubles) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("neginf", thrift.DOUBLE, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Neginf))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "neginf", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldNeginf(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *Doubles) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("repeating", thrift.DOUBLE, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Repeating))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "repeating", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldRepeating(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *Doubles) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("big", thrift.DOUBLE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Big))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "big", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldBig(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *Doubles) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("small", thrift.DOUBLE, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Small))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "small", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldSmall(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *Doubles) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("zero", thrift.DOUBLE, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Zero))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "zero", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldZero(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *Doubles) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("negzero", thrift.DOUBLE, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Negzero))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "negzero", p.ThriftName(), err)
	}
	return err
}

func (p *Doubles) WriteFieldNegzero(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *Doubles) TStructName() string {
	return "Doubles"
}

func (p *Doubles) ThriftName() string {
	return "Doubles"
}

func (p *Doubles) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Doubles(%+v)", *p)
}

func (p *Doubles) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Doubles)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Doubles) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Nan
	case 2:
		return p.Inf
	case 3:
		return p.Neginf
	case 4:
		return p.Repeating
	case 5:
		return p.Big
	case 6:
		return p.Small
	case 7:
		return p.Zero
	case 8:
		return p.Negzero
	}
	return nil
}

func (p *Doubles) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("nan", thrift.DOUBLE, 1),
		thrift.NewTField("inf", thrift.DOUBLE, 2),
		thrift.NewTField("neginf", thrift.DOUBLE, 3),
		thrift.NewTField("repeating", thrift.DOUBLE, 4),
		thrift.NewTField("big", thrift.DOUBLE, 5),
		thrift.NewTField("small", thrift.DOUBLE, 6),
		thrift.NewTField("zero", thrift.DOUBLE, 7),
		thrift.NewTField("negzero", thrift.DOUBLE, 8),
	})
}

/**
 * Attributes:
 *  - ImTrue
 *  - ImFalse
 *  - ABite
 *  - Integer16
 *  - Integer32
 *  - Integer64
 *  - DoublePrecision
 *  - SomeCharacters
 *  - ZomgUnicode
 *  - WhatWho
 *  - Base64
 *  - ByteList
 *  - I16List
 *  - I64List
 */
type OneOfEach struct {
	ImTrue          bool         "im_true"          // 1
	ImFalse         bool         "im_false"         // 2
	ABite           int8         "a_bite"           // 3
	Integer16       int16        "integer16"        // 4
	Integer32       int32        "integer32"        // 5
	Integer64       int64        "integer64"        // 6
	DoublePrecision float64      "double_precision" // 7
	SomeCharacters  string       "some_characters"  // 8
	ZomgUnicode     string       "zomg_unicode"     // 9
	WhatWho         bool         "what_who"         // 10
	Base64          []byte       "base64"           // 11
	ByteList        thrift.TList "byte_list"        // 12
	I16List         thrift.TList "i16_list"         // 13
	I64List         thrift.TList "i64_list"         // 14
}

var tstructOneOfEach = thrift.NewTStruct("OneOfEach", []thrift.TField{
	thrift.NewTField("im_true", thrift.BOOL, 1),
	thrift.NewTField("im_false", thrift.BOOL, 2),
	thrift.NewTField("a_bite", thrift.BYTE, 3),
	thrift.NewTField("integer16", thrift.I16, 4),
	thrift.NewTField("integer32", thrift.I32, 5),
	thrift.NewTField("integer64", thrift.I64, 6),
	thrift.NewTField("double_precision", thrift.DOUBLE, 7),
	thrift.NewTField("some_characters", thrift.STRING, 8),
	thrift.NewTField("zomg_unicode", thrift.STRING, 9),
	thrift.NewTField("what_who", thrift.BOOL, 10),
	thrift.NewTField("base64", thrift.BINARY, 11),
	thrift.NewTField("byte_list", thrift.LIST, 12),
	thrift.NewTField("i16_list", thrift.LIST, 13),
	thrift.NewTField("i64_list", thrift.LIST, 14),
})

func (*OneOfEach) GetTStruct() thrift.TStruct { return tstructOneOfEach }
func NewOneOfEach() *OneOfEach {
	output := &OneOfEach{}
	{
		output.ABite = 127
		output.Integer16 = 32767
		output.Integer64 = 10000000000
		output.ByteList = thrift.NewTList(thrift.BYTE, 3)
		{
			var v16 int8 = 1
			output.ByteList.Push(v16)
			var v17 int8 = 2
			output.ByteList.Push(v17)
			var v18 int8 = 3
			output.ByteList.Push(v18)
		}

		output.I16List = thrift.NewTList(thrift.I16, 3)
		{
			var v19 int16 = 1
			output.I16List.Push(v19)
			var v20 int16 = 2
			output.I16List.Push(v20)
			var v21 int16 = 3
			output.I16List.Push(v21)
		}

		output.I64List = thrift.NewTList(thrift.I64, 3)
		{
			var v22 int64 = 1
			output.I64List.Push(v22)
			var v23 int64 = 2
			output.I64List.Push(v23)
			var v24 int64 = 3
			output.I64List.Push(v24)
		}

	}
	return output
}

func (p *OneOfEach) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructOneOfEach.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructOneOfEach.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructOneOfEach.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "im_true" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "im_false" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "a_bite" {
			if fieldTypeId == thrift.BYTE {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "integer16" {
			if fieldTypeId == thrift.I16 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "integer32" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "integer64" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "double_precision" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "some_characters" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 9 || fieldName == "zomg_unicode" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 10 || fieldName == "what_who" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 11 || fieldName == "base64" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 12 || fieldName == "byte_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 13 || fieldName == "i16_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 14 || fieldName == "i64_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v25, err26 := iprot.ReadBool()
	if err26 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "im_true", p.ThriftName(), err26)
	}
	p.ImTrue = v25
	return err
}

func (p *OneOfEach) ReadFieldImTrue(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *OneOfEach) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v27, err28 := iprot.ReadBool()
	if err28 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "im_false", p.ThriftName(), err28)
	}
	p.ImFalse = v27
	return err
}

func (p *OneOfEach) ReadFieldImFalse(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *OneOfEach) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v29, err30 := iprot.ReadByte()
	if err30 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "a_bite", p.ThriftName(), err30)
	}
	p.ABite = v29
	return err
}

func (p *OneOfEach) ReadFieldABite(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *OneOfEach) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v31, err32 := iprot.ReadI16()
	if err32 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "integer16", p.ThriftName(), err32)
	}
	p.Integer16 = v31
	return err
}

func (p *OneOfEach) ReadFieldInteger16(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *OneOfEach) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v33, err34 := iprot.ReadI32()
	if err34 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "integer32", p.ThriftName(), err34)
	}
	p.Integer32 = v33
	return err
}

func (p *OneOfEach) ReadFieldInteger32(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *OneOfEach) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v35, err36 := iprot.ReadI64()
	if err36 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "integer64", p.ThriftName(), err36)
	}
	p.Integer64 = v35
	return err
}

func (p *OneOfEach) ReadFieldInteger64(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *OneOfEach) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v37, err38 := iprot.ReadDouble()
	if err38 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "double_precision", p.ThriftName(), err38)
	}
	p.DoublePrecision = v37
	return err
}

func (p *OneOfEach) ReadFieldDoublePrecision(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *OneOfEach) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v39, err40 := iprot.ReadString()
	if err40 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "some_characters", p.ThriftName(), err40)
	}
	p.SomeCharacters = v39
	return err
}

func (p *OneOfEach) ReadFieldSomeCharacters(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *OneOfEach) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v41, err42 := iprot.ReadString()
	if err42 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "zomg_unicode", p.ThriftName(), err42)
	}
	p.ZomgUnicode = v41
	return err
}

func (p *OneOfEach) ReadFieldZomgUnicode(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField9(iprot)
}

func (p *OneOfEach) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v43, err44 := iprot.ReadBool()
	if err44 != nil {
		return thrift.NewTProtocolExceptionReadField(10, "what_who", p.ThriftName(), err44)
	}
	p.WhatWho = v43
	return err
}

func (p *OneOfEach) ReadFieldWhatWho(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField10(iprot)
}

func (p *OneOfEach) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v45, err46 := iprot.ReadBinary()
	if err46 != nil {
		return thrift.NewTProtocolExceptionReadField(11, "base64", p.ThriftName(), err46)
	}
	p.Base64 = v45
	return err
}

func (p *OneOfEach) ReadFieldBase64(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField11(iprot)
}

func (p *OneOfEach) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype52, _size49, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteList", "", err)
	}
	p.ByteList = thrift.NewTList(_etype52, _size49)
	for _i53 := 0; _i53 < _size49; _i53++ {
		v55, err56 := iprot.ReadByte()
		if err56 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem54", "", err56)
		}
		_elem54 := v55
		p.ByteList.Push(_elem54)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) ReadFieldByteList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField12(iprot)
}

func (p *OneOfEach) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype62, _size59, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16List", "", err)
	}
	p.I16List = thrift.NewTList(_etype62, _size59)
	for _i63 := 0; _i63 < _size59; _i63++ {
		v65, err66 := iprot.ReadI16()
		if err66 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem64", "", err66)
		}
		_elem64 := v65
		p.I16List.Push(_elem64)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) ReadFieldI16List(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField13(iprot)
}

func (p *OneOfEach) ReadField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype72, _size69, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64List", "", err)
	}
	p.I64List = thrift.NewTList(_etype72, _size69)
	for _i73 := 0; _i73 < _size69; _i73++ {
		v75, err76 := iprot.ReadI64()
		if err76 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem74", "", err76)
		}
		_elem74 := v75
		p.I64List.Push(_elem74)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *OneOfEach) ReadFieldI64List(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField14(iprot)
}

func (p *OneOfEach) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("OneOfEach")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField9(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField10(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField11(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField12(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField13(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField14(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("im_true", thrift.BOOL, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.ImTrue))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "im_true", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldImTrue(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *OneOfEach) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("im_false", thrift.BOOL, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.ImFalse))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "im_false", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldImFalse(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *OneOfEach) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_bite", thrift.BYTE, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	err = oprot.WriteByte(int8(p.ABite))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_bite", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldABite(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *OneOfEach) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer16", thrift.I16, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.Integer16))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "integer16", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldInteger16(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *OneOfEach) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer32", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Integer32))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "integer32", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldInteger32(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *OneOfEach) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("integer64", thrift.I64, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Integer64))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "integer64", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldInteger64(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *OneOfEach) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("double_precision", thrift.DOUBLE, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.DoublePrecision))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "double_precision", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldDoublePrecision(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *OneOfEach) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("some_characters", thrift.STRING, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.SomeCharacters))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "some_characters", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldSomeCharacters(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *OneOfEach) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("zomg_unicode", thrift.STRING, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.ZomgUnicode))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "zomg_unicode", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldZomgUnicode(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField9(oprot)
}

func (p *OneOfEach) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("what_who", thrift.BOOL, 10)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.WhatWho))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(10, "what_who", p.ThriftName(), err)
	}
	return err
}

func (p *OneOfEach) WriteFieldWhatWho(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField10(oprot)
}

func (p *OneOfEach) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Base64 != nil {
		err = oprot.WriteFieldBegin("base64", thrift.BINARY, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Base64)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "base64", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) WriteFieldBase64(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField11(oprot)
}

func (p *OneOfEach) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteList != nil {
		err = oprot.WriteFieldBegin("byte_list", thrift.LIST, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "byte_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BYTE, p.ByteList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter77 := range p.ByteList.Iter() {
			Iter78 := Iter77.(int8)
			err = oprot.WriteByte(int8(Iter78))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter78", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "byte_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) WriteFieldByteList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField12(oprot)
}

func (p *OneOfEach) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16List != nil {
		err = oprot.WriteFieldBegin("i16_list", thrift.LIST, 13)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i16_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I16, p.I16List.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter79 := range p.I16List.Iter() {
			Iter80 := Iter79.(int16)
			err = oprot.WriteI16(int16(Iter80))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter80", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i16_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) WriteFieldI16List(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField13(oprot)
}

func (p *OneOfEach) WriteField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64List != nil {
		err = oprot.WriteFieldBegin("i64_list", thrift.LIST, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I64, p.I64List.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter81 := range p.I64List.Iter() {
			Iter82 := Iter81.(int64)
			err = oprot.WriteI64(int64(Iter82))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter82", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *OneOfEach) WriteFieldI64List(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField14(oprot)
}

func (p *OneOfEach) TStructName() string {
	return "OneOfEach"
}

func (p *OneOfEach) ThriftName() string {
	return "OneOfEach"
}

func (p *OneOfEach) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneOfEach(%+v)", *p)
}

func (p *OneOfEach) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*OneOfEach)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *OneOfEach) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.ImTrue
	case 2:
		return p.ImFalse
	case 3:
		return p.ABite
	case 4:
		return p.Integer16
	case 5:
		return p.Integer32
	case 6:
		return p.Integer64
	case 7:
		return p.DoublePrecision
	case 8:
		return p.SomeCharacters
	case 9:
		return p.ZomgUnicode
	case 10:
		return p.WhatWho
	case 11:
		return p.Base64
	case 12:
		return p.ByteList
	case 13:
		return p.I16List
	case 14:
		return p.I64List
	}
	return nil
}

func (p *OneOfEach) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("im_true", thrift.BOOL, 1),
		thrift.NewTField("im_false", thrift.BOOL, 2),
		thrift.NewTField("a_bite", thrift.BYTE, 3),
		thrift.NewTField("integer16", thrift.I16, 4),
		thrift.NewTField("integer32", thrift.I32, 5),
		thrift.NewTField("integer64", thrift.I64, 6),
		thrift.NewTField("double_precision", thrift.DOUBLE, 7),
		thrift.NewTField("some_characters", thrift.STRING, 8),
		thrift.NewTField("zomg_unicode", thrift.STRING, 9),
		thrift.NewTField("what_who", thrift.BOOL, 10),
		thrift.NewTField("base64", thrift.BINARY, 11),
		thrift.NewTField("byte_list", thrift.LIST, 12),
		thrift.NewTField("i16_list", thrift.LIST, 13),
		thrift.NewTField("i64_list", thrift.LIST, 14),
	})
}

/**
 * Attributes:
 *  - TypeA1
 *  - Message
 */
type Bonk struct {
	TypeA1  int32  "type"    // 1
	Message string "message" // 2
}

var tstructBonk = thrift.NewTStruct("Bonk", []thrift.TField{
	thrift.NewTField("type", thrift.I32, 1),
	thrift.NewTField("message", thrift.STRING, 2),
})

func (*Bonk) GetTStruct() thrift.TStruct { return tstructBonk }
func NewBonk() *Bonk {
	output := &Bonk{}
	{
	}
	return output
}

func (p *Bonk) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBonk.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBonk.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBonk.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "type" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "message" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v83, err84 := iprot.ReadI32()
	if err84 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "type", p.ThriftName(), err84)
	}
	p.TypeA1 = v83
	return err
}

func (p *Bonk) ReadFieldType(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Bonk) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v85, err86 := iprot.ReadString()
	if err86 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "message", p.ThriftName(), err86)
	}
	p.Message = v85
	return err
}

func (p *Bonk) ReadFieldMessage(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Bonk) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Bonk")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("type", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.TypeA1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "type", p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) WriteFieldType(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Bonk) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("message", thrift.STRING, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Message))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err)
	}
	return err
}

func (p *Bonk) WriteFieldMessage(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Bonk) TStructName() string {
	return "Bonk"
}

func (p *Bonk) ThriftName() string {
	return "Bonk"
}

func (p *Bonk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bonk(%+v)", *p)
}

func (p *Bonk) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Bonk)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Bonk) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TypeA1
	case 2:
		return p.Message
	}
	return nil
}

func (p *Bonk) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("type", thrift.I32, 1),
		thrift.NewTField("message", thrift.STRING, 2),
	})
}

/**
 * Attributes:
 *  - MyBonk
 *  - MyOoe
 */
type Nesting struct {
	MyBonk *Bonk      "my_bonk" // 1
	MyOoe  *OneOfEach "my_ooe"  // 2
}

var tstructNesting = thrift.NewTStruct("Nesting", []thrift.TField{
	thrift.NewTField("my_bonk", thrift.STRUCT, 1),
	thrift.NewTField("my_ooe", thrift.STRUCT, 2),
})

func (*Nesting) GetTStruct() thrift.TStruct { return tstructNesting }
func NewNesting() *Nesting {
	output := &Nesting{}
	{
	}
	return output
}

func (p *Nesting) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructNesting.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructNesting.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructNesting.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "my_bonk" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "my_ooe" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Nesting) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.MyBonk = NewBonk()
	err89 := p.MyBonk.Read(iprot)
	if err89 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.MyBonkBonk", err89)
	}
	return err
}

func (p *Nesting) ReadFieldMyBonk(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Nesting) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.MyOoe = NewOneOfEach()
	err92 := p.MyOoe.Read(iprot)
	if err92 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.MyOoeOneOfEach", err92)
	}
	return err
}

func (p *Nesting) ReadFieldMyOoe(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Nesting) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Nesting")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Nesting) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MyBonk != nil {
		err = oprot.WriteFieldBegin("my_bonk", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "my_bonk", p.ThriftName(), err)
		}
		err = p.MyBonk.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Bonk", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "my_bonk", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Nesting) WriteFieldMyBonk(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Nesting) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MyOoe != nil {
		err = oprot.WriteFieldBegin("my_ooe", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "my_ooe", p.ThriftName(), err)
		}
		err = p.MyOoe.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "my_ooe", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Nesting) WriteFieldMyOoe(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Nesting) TStructName() string {
	return "Nesting"
}

func (p *Nesting) ThriftName() string {
	return "Nesting"
}

func (p *Nesting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Nesting(%+v)", *p)
}

func (p *Nesting) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Nesting)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Nesting) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.MyBonk
	case 2:
		return p.MyOoe
	}
	return nil
}

func (p *Nesting) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("my_bonk", thrift.STRUCT, 1),
		thrift.NewTField("my_ooe", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Big
 *  - Contain
 *  - Bonks
 */
type HolyMoley struct {
	Big     thrift.TList "big"     // 1
	Contain thrift.TSet  "contain" // 2
	Bonks   thrift.TMap  "bonks"   // 3
}

var tstructHolyMoley = thrift.NewTStruct("HolyMoley", []thrift.TField{
	thrift.NewTField("big", thrift.LIST, 1),
	thrift.NewTField("contain", thrift.SET, 2),
	thrift.NewTField("bonks", thrift.MAP, 3),
})

func (*HolyMoley) GetTStruct() thrift.TStruct { return tstructHolyMoley }
func NewHolyMoley() *HolyMoley {
	output := &HolyMoley{}
	{
	}
	return output
}

func (p *HolyMoley) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructHolyMoley.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructHolyMoley.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructHolyMoley.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "big" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "contain" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "bonks" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *HolyMoley) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype98, _size95, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Big", "", err)
	}
	p.Big = thrift.NewTList(_etype98, _size95)
	for _i99 := 0; _i99 < _size95; _i99++ {
		_elem100 := NewOneOfEach()
		err103 := _elem100.Read(iprot)
		if err103 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem100OneOfEach", err103)
		}
		p.Big.Push(_elem100)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *HolyMoley) ReadFieldBig(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *HolyMoley) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype109, _size106, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Contain", "", err)
	}
	p.Contain = thrift.NewTSet(_etype109, _size106)
	for _i110 := 0; _i110 < _size106; _i110++ {
		_etype117, _size114, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_elem111", "", err)
		}
		_elem111 := thrift.NewTList(_etype117, _size114)
		for _i118 := 0; _i118 < _size114; _i118++ {
			v120, err121 := iprot.ReadString()
			if err121 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem119", "", err121)
			}
			_elem119 := v120
			_elem111.Push(_elem119)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Contain.Add(_elem111)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *HolyMoley) ReadFieldContain(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *HolyMoley) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype125, _vtype126, _size124, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Bonks", "", err)
	}
	p.Bonks = thrift.NewTMap(_ktype125, _vtype126, _size124)
	for _i128 := 0; _i128 < _size124; _i128++ {
		v131, err132 := iprot.ReadString()
		if err132 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key129", "", err132)
		}
		_key129 := v131
		_etype138, _size135, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val130", "", err)
		}
		_val130 := thrift.NewTList(_etype138, _size135)
		for _i139 := 0; _i139 < _size135; _i139++ {
			_elem140 := NewBonk()
			err143 := _elem140.Read(iprot)
			if err143 != nil {
				return thrift.NewTProtocolExceptionReadStruct("_elem140Bonk", err143)
			}
			_val130.Push(_elem140)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.Bonks.Set(_key129, _val130)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *HolyMoley) ReadFieldBonks(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *HolyMoley) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("HolyMoley")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *HolyMoley) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Big != nil {
		err = oprot.WriteFieldBegin("big", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "big", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.Big.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter144 := range p.Big.Iter() {
			Iter145 := Iter144.(*OneOfEach)
			err = Iter145.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "big", p.ThriftName(), err)
		}
	}
	return err
}

func (p *HolyMoley) WriteFieldBig(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *HolyMoley) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Contain != nil {
		err = oprot.WriteFieldBegin("contain", thrift.SET, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "contain", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.LIST, p.Contain.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter146 := p.Contain.Front(); Iter146 != nil; Iter146 = Iter146.Next() {
			Iter147 := Iter146.Value.(thrift.TList)
			err = oprot.WriteListBegin(thrift.STRING, Iter147.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter148 := range Iter147.Iter() {
				Iter149 := Iter148.(string)
				err = oprot.WriteString(string(Iter149))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter149", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "contain", p.ThriftName(), err)
		}
	}
	return err
}

func (p *HolyMoley) WriteFieldContain(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *HolyMoley) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Bonks != nil {
		err = oprot.WriteFieldBegin("bonks", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bonks", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.Bonks.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter150 := range p.Bonks.Iter() {
			Kiter151, Viter152 := Miter150.Key().(string), Miter150.Value().(thrift.TList)
			err = oprot.WriteString(string(Kiter151))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter151", "", err)
			}
			err = oprot.WriteListBegin(thrift.STRUCT, Viter152.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter153 := range Viter152.Iter() {
				Iter154 := Iter153.(*Bonk)
				err = Iter154.Write(oprot)
				if err != nil {
					return thrift.NewTProtocolExceptionWriteStruct("Bonk", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bonks", p.ThriftName(), err)
		}
	}
	return err
}

func (p *HolyMoley) WriteFieldBonks(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *HolyMoley) TStructName() string {
	return "HolyMoley"
}

func (p *HolyMoley) ThriftName() string {
	return "HolyMoley"
}

func (p *HolyMoley) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HolyMoley(%+v)", *p)
}

func (p *HolyMoley) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*HolyMoley)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *HolyMoley) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Big
	case 2:
		return p.Contain
	case 3:
		return p.Bonks
	}
	return nil
}

func (p *HolyMoley) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("big", thrift.LIST, 1),
		thrift.NewTField("contain", thrift.SET, 2),
		thrift.NewTField("bonks", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - FirstTag2
 *  - SecondTag1
 */
type Backwards struct {
	SecondTag1 int32 "second_tag1" // 1
	FirstTag2  int32 "first_tag2"  // 2
}

var tstructBackwards = thrift.NewTStruct("Backwards", []thrift.TField{
	thrift.NewTField("first_tag2", thrift.I32, 2),
	thrift.NewTField("second_tag1", thrift.I32, 1),
})

func (*Backwards) GetTStruct() thrift.TStruct { return tstructBackwards }
func NewBackwards() *Backwards {
	output := &Backwards{}
	{
	}
	return output
}

func (p *Backwards) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBackwards.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBackwards.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBackwards.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 2 || fieldName == "first_tag2" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "second_tag1" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v155, err156 := iprot.ReadI32()
	if err156 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "first_tag2", p.ThriftName(), err156)
	}
	p.FirstTag2 = v155
	return err
}

func (p *Backwards) ReadFieldFirstTag2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Backwards) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v157, err158 := iprot.ReadI32()
	if err158 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "second_tag1", p.ThriftName(), err158)
	}
	p.SecondTag1 = v157
	return err
}

func (p *Backwards) ReadFieldSecondTag1(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Backwards) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Backwards")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("second_tag1", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.SecondTag1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "second_tag1", p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) WriteFieldSecondTag1(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Backwards) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("first_tag2", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.FirstTag2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "first_tag2", p.ThriftName(), err)
	}
	return err
}

func (p *Backwards) WriteFieldFirstTag2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Backwards) TStructName() string {
	return "Backwards"
}

func (p *Backwards) ThriftName() string {
	return "Backwards"
}

func (p *Backwards) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Backwards(%+v)", *p)
}

func (p *Backwards) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Backwards)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Backwards) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 2:
		return p.FirstTag2
	case 1:
		return p.SecondTag1
	}
	return nil
}

func (p *Backwards) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("first_tag2", thrift.I32, 2),
		thrift.NewTField("second_tag1", thrift.I32, 1),
	})
}

type Empty struct {
}

var tstructEmpty = thrift.NewTStruct("Empty", []thrift.TField{})

func (*Empty) GetTStruct() thrift.TStruct { return tstructEmpty }
func NewEmpty() *Empty {
	output := &Empty{}
	{
	}
	return output
}

func (p *Empty) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEmpty.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructEmpty.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructEmpty.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Empty) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Empty")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Empty) TStructName() string {
	return "Empty"
}

func (p *Empty) ThriftName() string {
	return "Empty"
}

func (p *Empty) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Empty(%+v)", *p)
}

func (p *Empty) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Empty)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Empty) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *Empty) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Foo
 */
type Wrapper struct {
	Foo *Empty "foo" // 1
}

var tstructWrapper = thrift.NewTStruct("Wrapper", []thrift.TField{
	thrift.NewTField("foo", thrift.STRUCT, 1),
})

func (*Wrapper) GetTStruct() thrift.TStruct { return tstructWrapper }
func NewWrapper() *Wrapper {
	output := &Wrapper{}
	{
	}
	return output
}

func (p *Wrapper) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructWrapper.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructWrapper.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructWrapper.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "foo" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Wrapper) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Foo = NewEmpty()
	err161 := p.Foo.Read(iprot)
	if err161 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.FooEmpty", err161)
	}
	return err
}

func (p *Wrapper) ReadFieldFoo(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Wrapper) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Wrapper")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Wrapper) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Foo != nil {
		err = oprot.WriteFieldBegin("foo", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "foo", p.ThriftName(), err)
		}
		err = p.Foo.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "foo", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Wrapper) WriteFieldFoo(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Wrapper) TStructName() string {
	return "Wrapper"
}

func (p *Wrapper) ThriftName() string {
	return "Wrapper"
}

func (p *Wrapper) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Wrapper(%+v)", *p)
}

func (p *Wrapper) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Wrapper)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Wrapper) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Foo
	}
	return nil
}

func (p *Wrapper) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("foo", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - A
 *  - B
 *  - C
 *  - D
 *  - Myintlist
 *  - Maps
 *  - Bigint
 *  - Triple
 */
type RandomStuff struct {
	A         int32        "a"         // 1
	B         int32        "b"         // 2
	C         int32        "c"         // 3
	D         int32        "d"         // 4
	Myintlist thrift.TList "myintlist" // 5
	Maps      thrift.TMap  "maps"      // 6
	Bigint    int64        "bigint"    // 7
	Triple    float64      "triple"    // 8
}

var tstructRandomStuff = thrift.NewTStruct("RandomStuff", []thrift.TField{
	thrift.NewTField("a", thrift.I32, 1),
	thrift.NewTField("b", thrift.I32, 2),
	thrift.NewTField("c", thrift.I32, 3),
	thrift.NewTField("d", thrift.I32, 4),
	thrift.NewTField("myintlist", thrift.LIST, 5),
	thrift.NewTField("maps", thrift.MAP, 6),
	thrift.NewTField("bigint", thrift.I64, 7),
	thrift.NewTField("triple", thrift.DOUBLE, 8),
})

func (*RandomStuff) GetTStruct() thrift.TStruct { return tstructRandomStuff }
func NewRandomStuff() *RandomStuff {
	output := &RandomStuff{}
	{
	}
	return output
}

func (p *RandomStuff) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructRandomStuff.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructRandomStuff.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructRandomStuff.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "a" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "b" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "c" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "d" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "myintlist" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "maps" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "bigint" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "triple" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v162, err163 := iprot.ReadI32()
	if err163 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a", p.ThriftName(), err163)
	}
	p.A = v162
	return err
}

func (p *RandomStuff) ReadFieldA(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *RandomStuff) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v164, err165 := iprot.ReadI32()
	if err165 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "b", p.ThriftName(), err165)
	}
	p.B = v164
	return err
}

func (p *RandomStuff) ReadFieldB(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *RandomStuff) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v166, err167 := iprot.ReadI32()
	if err167 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "c", p.ThriftName(), err167)
	}
	p.C = v166
	return err
}

func (p *RandomStuff) ReadFieldC(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *RandomStuff) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v168, err169 := iprot.ReadI32()
	if err169 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "d", p.ThriftName(), err169)
	}
	p.D = v168
	return err
}

func (p *RandomStuff) ReadFieldD(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *RandomStuff) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype175, _size172, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Myintlist", "", err)
	}
	p.Myintlist = thrift.NewTList(_etype175, _size172)
	for _i176 := 0; _i176 < _size172; _i176++ {
		v178, err179 := iprot.ReadI32()
		if err179 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem177", "", err179)
		}
		_elem177 := v178
		p.Myintlist.Push(_elem177)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *RandomStuff) ReadFieldMyintlist(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *RandomStuff) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype183, _vtype184, _size182, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Maps", "", err)
	}
	p.Maps = thrift.NewTMap(_ktype183, _vtype184, _size182)
	for _i186 := 0; _i186 < _size182; _i186++ {
		v189, err190 := iprot.ReadI32()
		if err190 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key187", "", err190)
		}
		_key187 := v189
		_val188 := NewWrapper()
		err193 := _val188.Read(iprot)
		if err193 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val188Wrapper", err193)
		}
		p.Maps.Set(_key187, _val188)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *RandomStuff) ReadFieldMaps(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *RandomStuff) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v194, err195 := iprot.ReadI64()
	if err195 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "bigint", p.ThriftName(), err195)
	}
	p.Bigint = v194
	return err
}

func (p *RandomStuff) ReadFieldBigint(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *RandomStuff) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v196, err197 := iprot.ReadDouble()
	if err197 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "triple", p.ThriftName(), err197)
	}
	p.Triple = v196
	return err
}

func (p *RandomStuff) ReadFieldTriple(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *RandomStuff) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("RandomStuff")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.A))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldA(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *RandomStuff) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("b", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.B))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "b", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldB(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *RandomStuff) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("c", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.C))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "c", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldC(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *RandomStuff) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("d", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.D))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "d", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldD(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *RandomStuff) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Myintlist != nil {
		err = oprot.WriteFieldBegin("myintlist", thrift.LIST, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "myintlist", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I32, p.Myintlist.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter198 := range p.Myintlist.Iter() {
			Iter199 := Iter198.(int32)
			err = oprot.WriteI32(int32(Iter199))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter199", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "myintlist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RandomStuff) WriteFieldMyintlist(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *RandomStuff) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Maps != nil {
		err = oprot.WriteFieldBegin("maps", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "maps", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, p.Maps.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter200 := range p.Maps.Iter() {
			Kiter201, Viter202 := Miter200.Key().(int32), Miter200.Value().(*Wrapper)
			err = oprot.WriteI32(int32(Kiter201))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter201", "", err)
			}
			err = Viter202.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Wrapper", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "maps", p.ThriftName(), err)
		}
	}
	return err
}

func (p *RandomStuff) WriteFieldMaps(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *RandomStuff) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("bigint", thrift.I64, 7)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Bigint))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(7, "bigint", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldBigint(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *RandomStuff) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("triple", thrift.DOUBLE, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.Triple))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "triple", p.ThriftName(), err)
	}
	return err
}

func (p *RandomStuff) WriteFieldTriple(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *RandomStuff) TStructName() string {
	return "RandomStuff"
}

func (p *RandomStuff) ThriftName() string {
	return "RandomStuff"
}

func (p *RandomStuff) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RandomStuff(%+v)", *p)
}

func (p *RandomStuff) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*RandomStuff)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *RandomStuff) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.A
	case 2:
		return p.B
	case 3:
		return p.C
	case 4:
		return p.D
	case 5:
		return p.Myintlist
	case 6:
		return p.Maps
	case 7:
		return p.Bigint
	case 8:
		return p.Triple
	}
	return nil
}

func (p *RandomStuff) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a", thrift.I32, 1),
		thrift.NewTField("b", thrift.I32, 2),
		thrift.NewTField("c", thrift.I32, 3),
		thrift.NewTField("d", thrift.I32, 4),
		thrift.NewTField("myintlist", thrift.LIST, 5),
		thrift.NewTField("maps", thrift.MAP, 6),
		thrift.NewTField("bigint", thrift.I64, 7),
		thrift.NewTField("triple", thrift.DOUBLE, 8),
	})
}

/**
 * Attributes:
 *  - A
 *  - B1
 *  - B2
 *  - B3
 *  - B4
 *  - B5
 *  - B6
 */
type Base64 struct {
	A  int32  "a"  // 1
	B1 []byte "b1" // 2
	B2 []byte "b2" // 3
	B3 []byte "b3" // 4
	B4 []byte "b4" // 5
	B5 []byte "b5" // 6
	B6 []byte "b6" // 7
}

var tstructBase64 = thrift.NewTStruct("Base64", []thrift.TField{
	thrift.NewTField("a", thrift.I32, 1),
	thrift.NewTField("b1", thrift.BINARY, 2),
	thrift.NewTField("b2", thrift.BINARY, 3),
	thrift.NewTField("b3", thrift.BINARY, 4),
	thrift.NewTField("b4", thrift.BINARY, 5),
	thrift.NewTField("b5", thrift.BINARY, 6),
	thrift.NewTField("b6", thrift.BINARY, 7),
})

func (*Base64) GetTStruct() thrift.TStruct { return tstructBase64 }
func NewBase64() *Base64 {
	output := &Base64{}
	{
	}
	return output
}

func (p *Base64) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBase64.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBase64.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBase64.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "a" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "b1" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "b2" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "b3" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "b4" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "b5" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "b6" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Base64) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v203, err204 := iprot.ReadI32()
	if err204 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a", p.ThriftName(), err204)
	}
	p.A = v203
	return err
}

func (p *Base64) ReadFieldA(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *Base64) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v205, err206 := iprot.ReadBinary()
	if err206 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "b1", p.ThriftName(), err206)
	}
	p.B1 = v205
	return err
}

func (p *Base64) ReadFieldB1(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *Base64) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v207, err208 := iprot.ReadBinary()
	if err208 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "b2", p.ThriftName(), err208)
	}
	p.B2 = v207
	return err
}

func (p *Base64) ReadFieldB2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *Base64) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v209, err210 := iprot.ReadBinary()
	if err210 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "b3", p.ThriftName(), err210)
	}
	p.B3 = v209
	return err
}

func (p *Base64) ReadFieldB3(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *Base64) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v211, err212 := iprot.ReadBinary()
	if err212 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "b4", p.ThriftName(), err212)
	}
	p.B4 = v211
	return err
}

func (p *Base64) ReadFieldB4(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *Base64) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v213, err214 := iprot.ReadBinary()
	if err214 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "b5", p.ThriftName(), err214)
	}
	p.B5 = v213
	return err
}

func (p *Base64) ReadFieldB5(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *Base64) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v215, err216 := iprot.ReadBinary()
	if err216 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "b6", p.ThriftName(), err216)
	}
	p.B6 = v215
	return err
}

func (p *Base64) ReadFieldB6(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *Base64) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Base64")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *Base64) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.A))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a", p.ThriftName(), err)
	}
	return err
}

func (p *Base64) WriteFieldA(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *Base64) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B1 != nil {
		err = oprot.WriteFieldBegin("b1", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b1", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB1(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *Base64) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B2 != nil {
		err = oprot.WriteFieldBegin("b2", thrift.BINARY, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b2", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *Base64) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B3 != nil {
		err = oprot.WriteFieldBegin("b3", thrift.BINARY, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b3", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB3(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *Base64) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B4 != nil {
		err = oprot.WriteFieldBegin("b4", thrift.BINARY, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "b4", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB4(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *Base64) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B5 != nil {
		err = oprot.WriteFieldBegin("b5", thrift.BINARY, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "b5", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB5(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *Base64) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B6 != nil {
		err = oprot.WriteFieldBegin("b6", thrift.BINARY, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.B6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "b6", p.ThriftName(), err)
		}
	}
	return err
}

func (p *Base64) WriteFieldB6(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *Base64) TStructName() string {
	return "Base64"
}

func (p *Base64) ThriftName() string {
	return "Base64"
}

func (p *Base64) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Base64(%+v)", *p)
}

func (p *Base64) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*Base64)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *Base64) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.A
	case 2:
		return p.B1
	case 3:
		return p.B2
	case 4:
		return p.B3
	case 5:
		return p.B4
	case 6:
		return p.B5
	case 7:
		return p.B6
	}
	return nil
}

func (p *Base64) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a", thrift.I32, 1),
		thrift.NewTField("b1", thrift.BINARY, 2),
		thrift.NewTField("b2", thrift.BINARY, 3),
		thrift.NewTField("b3", thrift.BINARY, 4),
		thrift.NewTField("b4", thrift.BINARY, 5),
		thrift.NewTField("b5", thrift.BINARY, 6),
		thrift.NewTField("b6", thrift.BINARY, 7),
	})
}

/**
 * Attributes:
 *  - AByte
 *  - AI16
 *  - AI32
 *  - AI64
 *  - ADouble
 *  - AString
 *  - ABinary
 *  - TrueField
 *  - FalseField
 *  - EmptyStructField
 *  - ByteList
 *  - I16List
 *  - I32List
 *  - I64List
 *  - DoubleList
 *  - StringList
 *  - BinaryList
 *  - BooleanList
 *  - StructList
 *  - ByteSet
 *  - I16Set
 *  - I32Set
 *  - I64Set
 *  - DoubleSet
 *  - StringSet
 *  - BinarySet
 *  - BooleanSet
 *  - StructSet
 *  - ByteByteMap
 *  - I16ByteMap
 *  - I32ByteMap
 *  - I64ByteMap
 *  - DoubleByteMap
 *  - StringByteMap
 *  - BinaryByteMap
 *  - BooleanByteMap
 *  - ByteI16Map
 *  - ByteI32Map
 *  - ByteI64Map
 *  - ByteDoubleMap
 *  - ByteStringMap
 *  - ByteBinaryMap
 *  - ByteBooleanMap
 *  - ListByteMap
 *  - SetByteMap
 *  - MapByteMap
 *  - ByteMapMap
 *  - ByteSetMap
 *  - ByteListMap
 */
type CompactProtoTestStruct struct {
	AByte            int8         "a_byte"             // 1
	AI16             int16        "a_i16"              // 2
	AI32             int32        "a_i32"              // 3
	AI64             int64        "a_i64"              // 4
	ADouble          float64      "a_double"           // 5
	AString          string       "a_string"           // 6
	ABinary          []byte       "a_binary"           // 7
	TrueField        bool         "true_field"         // 8
	FalseField       bool         "false_field"        // 9
	EmptyStructField *Empty       "empty_struct_field" // 10
	ByteList         thrift.TList "byte_list"          // 11
	I16List          thrift.TList "i16_list"           // 12
	I32List          thrift.TList "i32_list"           // 13
	I64List          thrift.TList "i64_list"           // 14
	DoubleList       thrift.TList "double_list"        // 15
	StringList       thrift.TList "string_list"        // 16
	BinaryList       thrift.TList "binary_list"        // 17
	BooleanList      thrift.TList "boolean_list"       // 18
	StructList       thrift.TList "struct_list"        // 19
	ByteSet          thrift.TSet  "byte_set"           // 20
	I16Set           thrift.TSet  "i16_set"            // 21
	I32Set           thrift.TSet  "i32_set"            // 22
	I64Set           thrift.TSet  "i64_set"            // 23
	DoubleSet        thrift.TSet  "double_set"         // 24
	StringSet        thrift.TSet  "string_set"         // 25
	BinarySet        thrift.TSet  "binary_set"         // 26
	BooleanSet       thrift.TSet  "boolean_set"        // 27
	StructSet        thrift.TSet  "struct_set"         // 28
	ByteByteMap      thrift.TMap  "byte_byte_map"      // 29
	I16ByteMap       thrift.TMap  "i16_byte_map"       // 30
	I32ByteMap       thrift.TMap  "i32_byte_map"       // 31
	I64ByteMap       thrift.TMap  "i64_byte_map"       // 32
	DoubleByteMap    thrift.TMap  "double_byte_map"    // 33
	StringByteMap    thrift.TMap  "string_byte_map"    // 34
	BinaryByteMap    thrift.TMap  "binary_byte_map"    // 35
	BooleanByteMap   thrift.TMap  "boolean_byte_map"   // 36
	ByteI16Map       thrift.TMap  "byte_i16_map"       // 37
	ByteI32Map       thrift.TMap  "byte_i32_map"       // 38
	ByteI64Map       thrift.TMap  "byte_i64_map"       // 39
	ByteDoubleMap    thrift.TMap  "byte_double_map"    // 40
	ByteStringMap    thrift.TMap  "byte_string_map"    // 41
	ByteBinaryMap    thrift.TMap  "byte_binary_map"    // 42
	ByteBooleanMap   thrift.TMap  "byte_boolean_map"   // 43
	ListByteMap      thrift.TMap  "list_byte_map"      // 44
	SetByteMap       thrift.TMap  "set_byte_map"       // 45
	MapByteMap       thrift.TMap  "map_byte_map"       // 46
	ByteMapMap       thrift.TMap  "byte_map_map"       // 47
	ByteSetMap       thrift.TMap  "byte_set_map"       // 48
	ByteListMap      thrift.TMap  "byte_list_map"      // 49
}

var tstructCompactProtoTestStruct = thrift.NewTStruct("CompactProtoTestStruct", []thrift.TField{
	thrift.NewTField("a_byte", thrift.BYTE, 1),
	thrift.NewTField("a_i16", thrift.I16, 2),
	thrift.NewTField("a_i32", thrift.I32, 3),
	thrift.NewTField("a_i64", thrift.I64, 4),
	thrift.NewTField("a_double", thrift.DOUBLE, 5),
	thrift.NewTField("a_string", thrift.STRING, 6),
	thrift.NewTField("a_binary", thrift.BINARY, 7),
	thrift.NewTField("true_field", thrift.BOOL, 8),
	thrift.NewTField("false_field", thrift.BOOL, 9),
	thrift.NewTField("empty_struct_field", thrift.STRUCT, 10),
	thrift.NewTField("byte_list", thrift.LIST, 11),
	thrift.NewTField("i16_list", thrift.LIST, 12),
	thrift.NewTField("i32_list", thrift.LIST, 13),
	thrift.NewTField("i64_list", thrift.LIST, 14),
	thrift.NewTField("double_list", thrift.LIST, 15),
	thrift.NewTField("string_list", thrift.LIST, 16),
	thrift.NewTField("binary_list", thrift.LIST, 17),
	thrift.NewTField("boolean_list", thrift.LIST, 18),
	thrift.NewTField("struct_list", thrift.LIST, 19),
	thrift.NewTField("byte_set", thrift.SET, 20),
	thrift.NewTField("i16_set", thrift.SET, 21),
	thrift.NewTField("i32_set", thrift.SET, 22),
	thrift.NewTField("i64_set", thrift.SET, 23),
	thrift.NewTField("double_set", thrift.SET, 24),
	thrift.NewTField("string_set", thrift.SET, 25),
	thrift.NewTField("binary_set", thrift.SET, 26),
	thrift.NewTField("boolean_set", thrift.SET, 27),
	thrift.NewTField("struct_set", thrift.SET, 28),
	thrift.NewTField("byte_byte_map", thrift.MAP, 29),
	thrift.NewTField("i16_byte_map", thrift.MAP, 30),
	thrift.NewTField("i32_byte_map", thrift.MAP, 31),
	thrift.NewTField("i64_byte_map", thrift.MAP, 32),
	thrift.NewTField("double_byte_map", thrift.MAP, 33),
	thrift.NewTField("string_byte_map", thrift.MAP, 34),
	thrift.NewTField("binary_byte_map", thrift.MAP, 35),
	thrift.NewTField("boolean_byte_map", thrift.MAP, 36),
	thrift.NewTField("byte_i16_map", thrift.MAP, 37),
	thrift.NewTField("byte_i32_map", thrift.MAP, 38),
	thrift.NewTField("byte_i64_map", thrift.MAP, 39),
	thrift.NewTField("byte_double_map", thrift.MAP, 40),
	thrift.NewTField("byte_string_map", thrift.MAP, 41),
	thrift.NewTField("byte_binary_map", thrift.MAP, 42),
	thrift.NewTField("byte_boolean_map", thrift.MAP, 43),
	thrift.NewTField("list_byte_map", thrift.MAP, 44),
	thrift.NewTField("set_byte_map", thrift.MAP, 45),
	thrift.NewTField("map_byte_map", thrift.MAP, 46),
	thrift.NewTField("byte_map_map", thrift.MAP, 47),
	thrift.NewTField("byte_set_map", thrift.MAP, 48),
	thrift.NewTField("byte_list_map", thrift.MAP, 49),
})

func (*CompactProtoTestStruct) GetTStruct() thrift.TStruct { return tstructCompactProtoTestStruct }
func NewCompactProtoTestStruct() *CompactProtoTestStruct {
	output := &CompactProtoTestStruct{}
	{
	}
	return output
}

func (p *CompactProtoTestStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactProtoTestStruct.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructCompactProtoTestStruct.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructCompactProtoTestStruct.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "a_byte" {
			if fieldTypeId == thrift.BYTE {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "a_i16" {
			if fieldTypeId == thrift.I16 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "a_i32" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "a_i64" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "a_double" {
			if fieldTypeId == thrift.DOUBLE {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "a_string" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "a_binary" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "true_field" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 9 || fieldName == "false_field" {
			if fieldTypeId == thrift.BOOL {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField9(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 10 || fieldName == "empty_struct_field" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField10(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 11 || fieldName == "byte_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField11(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 12 || fieldName == "i16_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField12(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 13 || fieldName == "i32_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField13(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 14 || fieldName == "i64_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField14(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 15 || fieldName == "double_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField15(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 16 || fieldName == "string_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField16(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 17 || fieldName == "binary_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField17(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 18 || fieldName == "boolean_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField18(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 19 || fieldName == "struct_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField19(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 20 || fieldName == "byte_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField20(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 21 || fieldName == "i16_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField21(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 22 || fieldName == "i32_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField22(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 23 || fieldName == "i64_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField23(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 24 || fieldName == "double_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField24(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 25 || fieldName == "string_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField25(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 26 || fieldName == "binary_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField26(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 27 || fieldName == "boolean_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField27(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 28 || fieldName == "struct_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField28(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField28(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 29 || fieldName == "byte_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField29(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 30 || fieldName == "i16_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField30(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 31 || fieldName == "i32_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField31(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 32 || fieldName == "i64_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField32(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 33 || fieldName == "double_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField33(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 34 || fieldName == "string_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField34(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 35 || fieldName == "binary_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField35(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField35(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 36 || fieldName == "boolean_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField36(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField36(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 37 || fieldName == "byte_i16_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField37(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 38 || fieldName == "byte_i32_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField38(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField38(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 39 || fieldName == "byte_i64_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField39(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField39(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 40 || fieldName == "byte_double_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField40(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField40(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 41 || fieldName == "byte_string_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField41(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField41(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 42 || fieldName == "byte_binary_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField42(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField42(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 43 || fieldName == "byte_boolean_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField43(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField43(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 44 || fieldName == "list_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField44(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField44(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 45 || fieldName == "set_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField45(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField45(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 46 || fieldName == "map_byte_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField46(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField46(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 47 || fieldName == "byte_map_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField47(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField47(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 48 || fieldName == "byte_set_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField48(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField48(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 49 || fieldName == "byte_list_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField49(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField49(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v217, err218 := iprot.ReadByte()
	if err218 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "a_byte", p.ThriftName(), err218)
	}
	p.AByte = v217
	return err
}

func (p *CompactProtoTestStruct) ReadFieldAByte(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *CompactProtoTestStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v219, err220 := iprot.ReadI16()
	if err220 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "a_i16", p.ThriftName(), err220)
	}
	p.AI16 = v219
	return err
}

func (p *CompactProtoTestStruct) ReadFieldAI16(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *CompactProtoTestStruct) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v221, err222 := iprot.ReadI32()
	if err222 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "a_i32", p.ThriftName(), err222)
	}
	p.AI32 = v221
	return err
}

func (p *CompactProtoTestStruct) ReadFieldAI32(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *CompactProtoTestStruct) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v223, err224 := iprot.ReadI64()
	if err224 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "a_i64", p.ThriftName(), err224)
	}
	p.AI64 = v223
	return err
}

func (p *CompactProtoTestStruct) ReadFieldAI64(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *CompactProtoTestStruct) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v225, err226 := iprot.ReadDouble()
	if err226 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "a_double", p.ThriftName(), err226)
	}
	p.ADouble = v225
	return err
}

func (p *CompactProtoTestStruct) ReadFieldADouble(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *CompactProtoTestStruct) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v227, err228 := iprot.ReadString()
	if err228 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "a_string", p.ThriftName(), err228)
	}
	p.AString = v227
	return err
}

func (p *CompactProtoTestStruct) ReadFieldAString(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *CompactProtoTestStruct) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v229, err230 := iprot.ReadBinary()
	if err230 != nil {
		return thrift.NewTProtocolExceptionReadField(7, "a_binary", p.ThriftName(), err230)
	}
	p.ABinary = v229
	return err
}

func (p *CompactProtoTestStruct) ReadFieldABinary(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *CompactProtoTestStruct) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v231, err232 := iprot.ReadBool()
	if err232 != nil {
		return thrift.NewTProtocolExceptionReadField(8, "true_field", p.ThriftName(), err232)
	}
	p.TrueField = v231
	return err
}

func (p *CompactProtoTestStruct) ReadFieldTrueField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *CompactProtoTestStruct) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v233, err234 := iprot.ReadBool()
	if err234 != nil {
		return thrift.NewTProtocolExceptionReadField(9, "false_field", p.ThriftName(), err234)
	}
	p.FalseField = v233
	return err
}

func (p *CompactProtoTestStruct) ReadFieldFalseField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField9(iprot)
}

func (p *CompactProtoTestStruct) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.EmptyStructField = NewEmpty()
	err237 := p.EmptyStructField.Read(iprot)
	if err237 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.EmptyStructFieldEmpty", err237)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldEmptyStructField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField10(iprot)
}

func (p *CompactProtoTestStruct) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype243, _size240, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteList", "", err)
	}
	p.ByteList = thrift.NewTList(_etype243, _size240)
	for _i244 := 0; _i244 < _size240; _i244++ {
		v246, err247 := iprot.ReadByte()
		if err247 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem245", "", err247)
		}
		_elem245 := v246
		p.ByteList.Push(_elem245)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField11(iprot)
}

func (p *CompactProtoTestStruct) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype253, _size250, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16List", "", err)
	}
	p.I16List = thrift.NewTList(_etype253, _size250)
	for _i254 := 0; _i254 < _size250; _i254++ {
		v256, err257 := iprot.ReadI16()
		if err257 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem255", "", err257)
		}
		_elem255 := v256
		p.I16List.Push(_elem255)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI16List(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField12(iprot)
}

func (p *CompactProtoTestStruct) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype263, _size260, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32List", "", err)
	}
	p.I32List = thrift.NewTList(_etype263, _size260)
	for _i264 := 0; _i264 < _size260; _i264++ {
		v266, err267 := iprot.ReadI32()
		if err267 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem265", "", err267)
		}
		_elem265 := v266
		p.I32List.Push(_elem265)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI32List(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField13(iprot)
}

func (p *CompactProtoTestStruct) ReadField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype273, _size270, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64List", "", err)
	}
	p.I64List = thrift.NewTList(_etype273, _size270)
	for _i274 := 0; _i274 < _size270; _i274++ {
		v276, err277 := iprot.ReadI64()
		if err277 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem275", "", err277)
		}
		_elem275 := v276
		p.I64List.Push(_elem275)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI64List(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField14(iprot)
}

func (p *CompactProtoTestStruct) ReadField15(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype283, _size280, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleList", "", err)
	}
	p.DoubleList = thrift.NewTList(_etype283, _size280)
	for _i284 := 0; _i284 < _size280; _i284++ {
		v286, err287 := iprot.ReadDouble()
		if err287 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem285", "", err287)
		}
		_elem285 := v286
		p.DoubleList.Push(_elem285)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldDoubleList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField15(iprot)
}

func (p *CompactProtoTestStruct) ReadField16(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype293, _size290, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringList", "", err)
	}
	p.StringList = thrift.NewTList(_etype293, _size290)
	for _i294 := 0; _i294 < _size290; _i294++ {
		v296, err297 := iprot.ReadString()
		if err297 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem295", "", err297)
		}
		_elem295 := v296
		p.StringList.Push(_elem295)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldStringList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField16(iprot)
}

func (p *CompactProtoTestStruct) ReadField17(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype303, _size300, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinaryList", "", err)
	}
	p.BinaryList = thrift.NewTList(_etype303, _size300)
	for _i304 := 0; _i304 < _size300; _i304++ {
		v306, err307 := iprot.ReadBinary()
		if err307 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem305", "", err307)
		}
		_elem305 := v306
		p.BinaryList.Push(_elem305)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBinaryList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField17(iprot)
}

func (p *CompactProtoTestStruct) ReadField18(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype313, _size310, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanList", "", err)
	}
	p.BooleanList = thrift.NewTList(_etype313, _size310)
	for _i314 := 0; _i314 < _size310; _i314++ {
		v316, err317 := iprot.ReadBool()
		if err317 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem315", "", err317)
		}
		_elem315 := v316
		p.BooleanList.Push(_elem315)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBooleanList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField18(iprot)
}

func (p *CompactProtoTestStruct) ReadField19(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype323, _size320, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	p.StructList = thrift.NewTList(_etype323, _size320)
	for _i324 := 0; _i324 < _size320; _i324++ {
		_elem325 := NewEmpty()
		err328 := _elem325.Read(iprot)
		if err328 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem325Empty", err328)
		}
		p.StructList.Push(_elem325)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldStructList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField19(iprot)
}

func (p *CompactProtoTestStruct) ReadField20(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype334, _size331, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteSet", "", err)
	}
	p.ByteSet = thrift.NewTSet(_etype334, _size331)
	for _i335 := 0; _i335 < _size331; _i335++ {
		v337, err338 := iprot.ReadByte()
		if err338 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem336", "", err338)
		}
		_elem336 := v337
		p.ByteSet.Add(_elem336)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteSet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField20(iprot)
}

func (p *CompactProtoTestStruct) ReadField21(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype344, _size341, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16Set", "", err)
	}
	p.I16Set = thrift.NewTSet(_etype344, _size341)
	for _i345 := 0; _i345 < _size341; _i345++ {
		v347, err348 := iprot.ReadI16()
		if err348 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem346", "", err348)
		}
		_elem346 := v347
		p.I16Set.Add(_elem346)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI16Set(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField21(iprot)
}

func (p *CompactProtoTestStruct) ReadField22(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype354, _size351, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	p.I32Set = thrift.NewTSet(_etype354, _size351)
	for _i355 := 0; _i355 < _size351; _i355++ {
		v357, err358 := iprot.ReadI32()
		if err358 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem356", "", err358)
		}
		_elem356 := v357
		p.I32Set.Add(_elem356)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI32Set(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField22(iprot)
}

func (p *CompactProtoTestStruct) ReadField23(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype364, _size361, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64Set", "", err)
	}
	p.I64Set = thrift.NewTSet(_etype364, _size361)
	for _i365 := 0; _i365 < _size361; _i365++ {
		v367, err368 := iprot.ReadI64()
		if err368 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem366", "", err368)
		}
		_elem366 := v367
		p.I64Set.Add(_elem366)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI64Set(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField23(iprot)
}

func (p *CompactProtoTestStruct) ReadField24(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype374, _size371, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleSet", "", err)
	}
	p.DoubleSet = thrift.NewTSet(_etype374, _size371)
	for _i375 := 0; _i375 < _size371; _i375++ {
		v377, err378 := iprot.ReadDouble()
		if err378 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem376", "", err378)
		}
		_elem376 := v377
		p.DoubleSet.Add(_elem376)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldDoubleSet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField24(iprot)
}

func (p *CompactProtoTestStruct) ReadField25(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype384, _size381, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringSet", "", err)
	}
	p.StringSet = thrift.NewTSet(_etype384, _size381)
	for _i385 := 0; _i385 < _size381; _i385++ {
		v387, err388 := iprot.ReadString()
		if err388 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem386", "", err388)
		}
		_elem386 := v387
		p.StringSet.Add(_elem386)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldStringSet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField25(iprot)
}

func (p *CompactProtoTestStruct) ReadField26(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype394, _size391, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinarySet", "", err)
	}
	p.BinarySet = thrift.NewTSet(_etype394, _size391)
	for _i395 := 0; _i395 < _size391; _i395++ {
		v397, err398 := iprot.ReadBinary()
		if err398 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem396", "", err398)
		}
		_elem396 := v397
		p.BinarySet.Add(_elem396)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBinarySet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField26(iprot)
}

func (p *CompactProtoTestStruct) ReadField27(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype404, _size401, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanSet", "", err)
	}
	p.BooleanSet = thrift.NewTSet(_etype404, _size401)
	for _i405 := 0; _i405 < _size401; _i405++ {
		v407, err408 := iprot.ReadBool()
		if err408 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem406", "", err408)
		}
		_elem406 := v407
		p.BooleanSet.Add(_elem406)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBooleanSet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField27(iprot)
}

func (p *CompactProtoTestStruct) ReadField28(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype414, _size411, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructSet", "", err)
	}
	p.StructSet = thrift.NewTSet(_etype414, _size411)
	for _i415 := 0; _i415 < _size411; _i415++ {
		_elem416 := NewEmpty()
		err419 := _elem416.Read(iprot)
		if err419 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem416Empty", err419)
		}
		p.StructSet.Add(_elem416)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldStructSet(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField28(iprot)
}

func (p *CompactProtoTestStruct) ReadField29(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype423, _vtype424, _size422, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteByteMap", "", err)
	}
	p.ByteByteMap = thrift.NewTMap(_ktype423, _vtype424, _size422)
	for _i426 := 0; _i426 < _size422; _i426++ {
		v429, err430 := iprot.ReadByte()
		if err430 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key427", "", err430)
		}
		_key427 := v429
		v431, err432 := iprot.ReadByte()
		if err432 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val428", "", err432)
		}
		_val428 := v431
		p.ByteByteMap.Set(_key427, _val428)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField29(iprot)
}

func (p *CompactProtoTestStruct) ReadField30(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype436, _vtype437, _size435, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I16ByteMap", "", err)
	}
	p.I16ByteMap = thrift.NewTMap(_ktype436, _vtype437, _size435)
	for _i439 := 0; _i439 < _size435; _i439++ {
		v442, err443 := iprot.ReadI16()
		if err443 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key440", "", err443)
		}
		_key440 := v442
		v444, err445 := iprot.ReadByte()
		if err445 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val441", "", err445)
		}
		_val441 := v444
		p.I16ByteMap.Set(_key440, _val441)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI16ByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField30(iprot)
}

func (p *CompactProtoTestStruct) ReadField31(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype449, _vtype450, _size448, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32ByteMap", "", err)
	}
	p.I32ByteMap = thrift.NewTMap(_ktype449, _vtype450, _size448)
	for _i452 := 0; _i452 < _size448; _i452++ {
		v455, err456 := iprot.ReadI32()
		if err456 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key453", "", err456)
		}
		_key453 := v455
		v457, err458 := iprot.ReadByte()
		if err458 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val454", "", err458)
		}
		_val454 := v457
		p.I32ByteMap.Set(_key453, _val454)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI32ByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField31(iprot)
}

func (p *CompactProtoTestStruct) ReadField32(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype462, _vtype463, _size461, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I64ByteMap", "", err)
	}
	p.I64ByteMap = thrift.NewTMap(_ktype462, _vtype463, _size461)
	for _i465 := 0; _i465 < _size461; _i465++ {
		v468, err469 := iprot.ReadI64()
		if err469 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key466", "", err469)
		}
		_key466 := v468
		v470, err471 := iprot.ReadByte()
		if err471 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val467", "", err471)
		}
		_val467 := v470
		p.I64ByteMap.Set(_key466, _val467)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldI64ByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField32(iprot)
}

func (p *CompactProtoTestStruct) ReadField33(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype475, _vtype476, _size474, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.DoubleByteMap", "", err)
	}
	p.DoubleByteMap = thrift.NewTMap(_ktype475, _vtype476, _size474)
	for _i478 := 0; _i478 < _size474; _i478++ {
		v481, err482 := iprot.ReadDouble()
		if err482 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key479", "", err482)
		}
		_key479 := v481
		v483, err484 := iprot.ReadByte()
		if err484 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val480", "", err484)
		}
		_val480 := v483
		p.DoubleByteMap.Set(_key479, _val480)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldDoubleByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField33(iprot)
}

func (p *CompactProtoTestStruct) ReadField34(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype488, _vtype489, _size487, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StringByteMap", "", err)
	}
	p.StringByteMap = thrift.NewTMap(_ktype488, _vtype489, _size487)
	for _i491 := 0; _i491 < _size487; _i491++ {
		v494, err495 := iprot.ReadString()
		if err495 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key492", "", err495)
		}
		_key492 := v494
		v496, err497 := iprot.ReadByte()
		if err497 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val493", "", err497)
		}
		_val493 := v496
		p.StringByteMap.Set(_key492, _val493)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldStringByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField34(iprot)
}

func (p *CompactProtoTestStruct) ReadField35(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype501, _vtype502, _size500, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BinaryByteMap", "", err)
	}
	p.BinaryByteMap = thrift.NewTMap(_ktype501, _vtype502, _size500)
	for _i504 := 0; _i504 < _size500; _i504++ {
		v507, err508 := iprot.ReadBinary()
		if err508 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key505", "", err508)
		}
		_key505 := v507
		v509, err510 := iprot.ReadByte()
		if err510 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val506", "", err510)
		}
		_val506 := v509
		p.BinaryByteMap.Set(_key505, _val506)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBinaryByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField35(iprot)
}

func (p *CompactProtoTestStruct) ReadField36(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype514, _vtype515, _size513, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.BooleanByteMap", "", err)
	}
	p.BooleanByteMap = thrift.NewTMap(_ktype514, _vtype515, _size513)
	for _i517 := 0; _i517 < _size513; _i517++ {
		v520, err521 := iprot.ReadBool()
		if err521 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key518", "", err521)
		}
		_key518 := v520
		v522, err523 := iprot.ReadByte()
		if err523 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val519", "", err523)
		}
		_val519 := v522
		p.BooleanByteMap.Set(_key518, _val519)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldBooleanByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField36(iprot)
}

func (p *CompactProtoTestStruct) ReadField37(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype527, _vtype528, _size526, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI16Map", "", err)
	}
	p.ByteI16Map = thrift.NewTMap(_ktype527, _vtype528, _size526)
	for _i530 := 0; _i530 < _size526; _i530++ {
		v533, err534 := iprot.ReadByte()
		if err534 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key531", "", err534)
		}
		_key531 := v533
		v535, err536 := iprot.ReadI16()
		if err536 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val532", "", err536)
		}
		_val532 := v535
		p.ByteI16Map.Set(_key531, _val532)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteI16Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField37(iprot)
}

func (p *CompactProtoTestStruct) ReadField38(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype540, _vtype541, _size539, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI32Map", "", err)
	}
	p.ByteI32Map = thrift.NewTMap(_ktype540, _vtype541, _size539)
	for _i543 := 0; _i543 < _size539; _i543++ {
		v546, err547 := iprot.ReadByte()
		if err547 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key544", "", err547)
		}
		_key544 := v546
		v548, err549 := iprot.ReadI32()
		if err549 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val545", "", err549)
		}
		_val545 := v548
		p.ByteI32Map.Set(_key544, _val545)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteI32Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField38(iprot)
}

func (p *CompactProtoTestStruct) ReadField39(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype553, _vtype554, _size552, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteI64Map", "", err)
	}
	p.ByteI64Map = thrift.NewTMap(_ktype553, _vtype554, _size552)
	for _i556 := 0; _i556 < _size552; _i556++ {
		v559, err560 := iprot.ReadByte()
		if err560 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key557", "", err560)
		}
		_key557 := v559
		v561, err562 := iprot.ReadI64()
		if err562 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val558", "", err562)
		}
		_val558 := v561
		p.ByteI64Map.Set(_key557, _val558)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteI64Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField39(iprot)
}

func (p *CompactProtoTestStruct) ReadField40(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype566, _vtype567, _size565, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteDoubleMap", "", err)
	}
	p.ByteDoubleMap = thrift.NewTMap(_ktype566, _vtype567, _size565)
	for _i569 := 0; _i569 < _size565; _i569++ {
		v572, err573 := iprot.ReadByte()
		if err573 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key570", "", err573)
		}
		_key570 := v572
		v574, err575 := iprot.ReadDouble()
		if err575 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val571", "", err575)
		}
		_val571 := v574
		p.ByteDoubleMap.Set(_key570, _val571)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteDoubleMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField40(iprot)
}

func (p *CompactProtoTestStruct) ReadField41(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype579, _vtype580, _size578, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteStringMap", "", err)
	}
	p.ByteStringMap = thrift.NewTMap(_ktype579, _vtype580, _size578)
	for _i582 := 0; _i582 < _size578; _i582++ {
		v585, err586 := iprot.ReadByte()
		if err586 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key583", "", err586)
		}
		_key583 := v585
		v587, err588 := iprot.ReadString()
		if err588 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val584", "", err588)
		}
		_val584 := v587
		p.ByteStringMap.Set(_key583, _val584)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteStringMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField41(iprot)
}

func (p *CompactProtoTestStruct) ReadField42(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype592, _vtype593, _size591, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteBinaryMap", "", err)
	}
	p.ByteBinaryMap = thrift.NewTMap(_ktype592, _vtype593, _size591)
	for _i595 := 0; _i595 < _size591; _i595++ {
		v598, err599 := iprot.ReadByte()
		if err599 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key596", "", err599)
		}
		_key596 := v598
		v600, err601 := iprot.ReadBinary()
		if err601 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val597", "", err601)
		}
		_val597 := v600
		p.ByteBinaryMap.Set(_key596, _val597)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteBinaryMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField42(iprot)
}

func (p *CompactProtoTestStruct) ReadField43(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype605, _vtype606, _size604, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteBooleanMap", "", err)
	}
	p.ByteBooleanMap = thrift.NewTMap(_ktype605, _vtype606, _size604)
	for _i608 := 0; _i608 < _size604; _i608++ {
		v611, err612 := iprot.ReadByte()
		if err612 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key609", "", err612)
		}
		_key609 := v611
		v613, err614 := iprot.ReadBool()
		if err614 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val610", "", err614)
		}
		_val610 := v613
		p.ByteBooleanMap.Set(_key609, _val610)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteBooleanMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField43(iprot)
}

func (p *CompactProtoTestStruct) ReadField44(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype618, _vtype619, _size617, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ListByteMap", "", err)
	}
	p.ListByteMap = thrift.NewTMap(_ktype618, _vtype619, _size617)
	for _i621 := 0; _i621 < _size617; _i621++ {
		_etype629, _size626, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key622", "", err)
		}
		_key622 := thrift.NewTList(_etype629, _size626)
		for _i630 := 0; _i630 < _size626; _i630++ {
			v632, err633 := iprot.ReadByte()
			if err633 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem631", "", err633)
			}
			_elem631 := v632
			_key622.Push(_elem631)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		v634, err635 := iprot.ReadByte()
		if err635 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val623", "", err635)
		}
		_val623 := v634
		p.ListByteMap.Set(_key622, _val623)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldListByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField44(iprot)
}

func (p *CompactProtoTestStruct) ReadField45(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype639, _vtype640, _size638, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.SetByteMap", "", err)
	}
	p.SetByteMap = thrift.NewTMap(_ktype639, _vtype640, _size638)
	for _i642 := 0; _i642 < _size638; _i642++ {
		_etype650, _size647, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key643", "", err)
		}
		_key643 := thrift.NewTSet(_etype650, _size647)
		for _i651 := 0; _i651 < _size647; _i651++ {
			v653, err654 := iprot.ReadByte()
			if err654 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem652", "", err654)
			}
			_elem652 := v653
			_key643.Add(_elem652)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		v655, err656 := iprot.ReadByte()
		if err656 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val644", "", err656)
		}
		_val644 := v655
		p.SetByteMap.Set(_key643, _val644)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldSetByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField45(iprot)
}

func (p *CompactProtoTestStruct) ReadField46(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype660, _vtype661, _size659, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MapByteMap", "", err)
	}
	p.MapByteMap = thrift.NewTMap(_ktype660, _vtype661, _size659)
	for _i663 := 0; _i663 < _size659; _i663++ {
		_ktype669, _vtype670, _size668, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key664", "", err)
		}
		_key664 := thrift.NewTMap(_ktype669, _vtype670, _size668)
		for _i672 := 0; _i672 < _size668; _i672++ {
			v675, err676 := iprot.ReadByte()
			if err676 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key673", "", err676)
			}
			_key673 := v675
			v677, err678 := iprot.ReadByte()
			if err678 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_val674", "", err678)
			}
			_val674 := v677
			_key664.Set(_key673, _val674)
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		v679, err680 := iprot.ReadByte()
		if err680 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val665", "", err680)
		}
		_val665 := v679
		p.MapByteMap.Set(_key664, _val665)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldMapByteMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField46(iprot)
}

func (p *CompactProtoTestStruct) ReadField47(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype684, _vtype685, _size683, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteMapMap", "", err)
	}
	p.ByteMapMap = thrift.NewTMap(_ktype684, _vtype685, _size683)
	for _i687 := 0; _i687 < _size683; _i687++ {
		v690, err691 := iprot.ReadByte()
		if err691 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key688", "", err691)
		}
		_key688 := v690
		_ktype695, _vtype696, _size694, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val689", "", err)
		}
		_val689 := thrift.NewTMap(_ktype695, _vtype696, _size694)
		for _i698 := 0; _i698 < _size694; _i698++ {
			v701, err702 := iprot.ReadByte()
			if err702 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_key699", "", err702)
			}
			_key699 := v701
			v703, err704 := iprot.ReadByte()
			if err704 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_val700", "", err704)
			}
			_val700 := v703
			_val689.Set(_key699, _val700)
		}
		err = iprot.ReadMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
		}
		p.ByteMapMap.Set(_key688, _val689)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteMapMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField47(iprot)
}

func (p *CompactProtoTestStruct) ReadField48(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype708, _vtype709, _size707, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteSetMap", "", err)
	}
	p.ByteSetMap = thrift.NewTMap(_ktype708, _vtype709, _size707)
	for _i711 := 0; _i711 < _size707; _i711++ {
		v714, err715 := iprot.ReadByte()
		if err715 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key712", "", err715)
		}
		_key712 := v714
		_etype721, _size718, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val713", "", err)
		}
		_val713 := thrift.NewTSet(_etype721, _size718)
		for _i722 := 0; _i722 < _size718; _i722++ {
			v724, err725 := iprot.ReadByte()
			if err725 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem723", "", err725)
			}
			_elem723 := v724
			_val713.Add(_elem723)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.ByteSetMap.Set(_key712, _val713)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteSetMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField48(iprot)
}

func (p *CompactProtoTestStruct) ReadField49(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype729, _vtype730, _size728, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ByteListMap", "", err)
	}
	p.ByteListMap = thrift.NewTMap(_ktype729, _vtype730, _size728)
	for _i732 := 0; _i732 < _size728; _i732++ {
		v735, err736 := iprot.ReadByte()
		if err736 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key733", "", err736)
		}
		_key733 := v735
		_etype742, _size739, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val734", "", err)
		}
		_val734 := thrift.NewTList(_etype742, _size739)
		for _i743 := 0; _i743 < _size739; _i743++ {
			v745, err746 := iprot.ReadByte()
			if err746 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem744", "", err746)
			}
			_elem744 := v745
			_val734.Push(_elem744)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		p.ByteListMap.Set(_key733, _val734)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *CompactProtoTestStruct) ReadFieldByteListMap(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField49(iprot)
}

func (p *CompactProtoTestStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("CompactProtoTestStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField9(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField10(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField11(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField12(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField13(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField14(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField15(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField16(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField17(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField18(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField19(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField20(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField21(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField22(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField23(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField24(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField25(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField26(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField27(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField28(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField29(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField30(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField31(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField32(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField33(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField34(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField35(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField36(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField37(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField38(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField39(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField40(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField41(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField42(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField43(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField44(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField45(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField46(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField47(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField48(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField49(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_byte", thrift.BYTE, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	err = oprot.WriteByte(int8(p.AByte))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "a_byte", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldAByte(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *CompactProtoTestStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i16", thrift.I16, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.AI16))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "a_i16", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldAI16(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *CompactProtoTestStruct) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i32", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.AI32))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "a_i32", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldAI32(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *CompactProtoTestStruct) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_i64", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.AI64))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "a_i64", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldAI64(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *CompactProtoTestStruct) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_double", thrift.DOUBLE, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	err = oprot.WriteDouble(float64(p.ADouble))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "a_double", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldADouble(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *CompactProtoTestStruct) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("a_string", thrift.STRING, 6)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.AString))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(6, "a_string", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldAString(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *CompactProtoTestStruct) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ABinary != nil {
		err = oprot.WriteFieldBegin("a_binary", thrift.BINARY, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.ABinary)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "a_binary", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldABinary(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *CompactProtoTestStruct) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("true_field", thrift.BOOL, 8)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.TrueField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(8, "true_field", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldTrueField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *CompactProtoTestStruct) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("false_field", thrift.BOOL, 9)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.FalseField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(9, "false_field", p.ThriftName(), err)
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldFalseField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField9(oprot)
}

func (p *CompactProtoTestStruct) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.EmptyStructField != nil {
		err = oprot.WriteFieldBegin("empty_struct_field", thrift.STRUCT, 10)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(10, "empty_struct_field", p.ThriftName(), err)
		}
		err = p.EmptyStructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(10, "empty_struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldEmptyStructField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField10(oprot)
}

func (p *CompactProtoTestStruct) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteList != nil {
		err = oprot.WriteFieldBegin("byte_list", thrift.LIST, 11)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "byte_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BYTE, p.ByteList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter747 := range p.ByteList.Iter() {
			Iter748 := Iter747.(int8)
			err = oprot.WriteByte(int8(Iter748))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter748", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(11, "byte_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField11(oprot)
}

func (p *CompactProtoTestStruct) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16List != nil {
		err = oprot.WriteFieldBegin("i16_list", thrift.LIST, 12)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "i16_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I16, p.I16List.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter749 := range p.I16List.Iter() {
			Iter750 := Iter749.(int16)
			err = oprot.WriteI16(int16(Iter750))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter750", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(12, "i16_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI16List(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField12(oprot)
}

func (p *CompactProtoTestStruct) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32List != nil {
		err = oprot.WriteFieldBegin("i32_list", thrift.LIST, 13)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i32_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I32, p.I32List.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter751 := range p.I32List.Iter() {
			Iter752 := Iter751.(int32)
			err = oprot.WriteI32(int32(Iter752))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter752", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(13, "i32_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI32List(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField13(oprot)
}

func (p *CompactProtoTestStruct) WriteField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64List != nil {
		err = oprot.WriteFieldBegin("i64_list", thrift.LIST, 14)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.I64, p.I64List.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter753 := range p.I64List.Iter() {
			Iter754 := Iter753.(int64)
			err = oprot.WriteI64(int64(Iter754))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter754", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(14, "i64_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI64List(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField14(oprot)
}

func (p *CompactProtoTestStruct) WriteField15(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleList != nil {
		err = oprot.WriteFieldBegin("double_list", thrift.LIST, 15)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "double_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.DOUBLE, p.DoubleList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter755 := range p.DoubleList.Iter() {
			Iter756 := Iter755.(float64)
			err = oprot.WriteDouble(float64(Iter756))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter756", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(15, "double_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldDoubleList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField15(oprot)
}

func (p *CompactProtoTestStruct) WriteField16(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringList != nil {
		err = oprot.WriteFieldBegin("string_list", thrift.LIST, 16)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "string_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, p.StringList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter757 := range p.StringList.Iter() {
			Iter758 := Iter757.(string)
			err = oprot.WriteString(string(Iter758))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter758", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(16, "string_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldStringList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField16(oprot)
}

func (p *CompactProtoTestStruct) WriteField17(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryList != nil {
		err = oprot.WriteFieldBegin("binary_list", thrift.LIST, 17)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "binary_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BINARY, p.BinaryList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter759 := range p.BinaryList.Iter() {
			Iter760 := Iter759.([]byte)
			err = oprot.WriteBinary(Iter760)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter760", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(17, "binary_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBinaryList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField17(oprot)
}

func (p *CompactProtoTestStruct) WriteField18(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanList != nil {
		err = oprot.WriteFieldBegin("boolean_list", thrift.LIST, 18)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "boolean_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.BOOL, p.BooleanList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter761 := range p.BooleanList.Iter() {
			Iter762 := Iter761.(bool)
			err = oprot.WriteBool(bool(Iter762))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter762", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(18, "boolean_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBooleanList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField18(oprot)
}

func (p *CompactProtoTestStruct) WriteField19(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 19)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.StructList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter763 := range p.StructList.Iter() {
			Iter764 := Iter763.(*Empty)
			err = Iter764.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(19, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldStructList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField19(oprot)
}

func (p *CompactProtoTestStruct) WriteField20(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteSet != nil {
		err = oprot.WriteFieldBegin("byte_set", thrift.SET, 20)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "byte_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.BYTE, p.ByteSet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter765 := p.ByteSet.Front(); Iter765 != nil; Iter765 = Iter765.Next() {
			Iter766 := Iter765.Value.(int8)
			err = oprot.WriteByte(int8(Iter766))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter766", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(20, "byte_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteSet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField20(oprot)
}

func (p *CompactProtoTestStruct) WriteField21(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16Set != nil {
		err = oprot.WriteFieldBegin("i16_set", thrift.SET, 21)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "i16_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I16, p.I16Set.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter767 := p.I16Set.Front(); Iter767 != nil; Iter767 = Iter767.Next() {
			Iter768 := Iter767.Value.(int16)
			err = oprot.WriteI16(int16(Iter768))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter768", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(21, "i16_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI16Set(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField21(oprot)
}

func (p *CompactProtoTestStruct) WriteField22(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 22)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, p.I32Set.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter769 := p.I32Set.Front(); Iter769 != nil; Iter769 = Iter769.Next() {
			Iter770 := Iter769.Value.(int32)
			err = oprot.WriteI32(int32(Iter770))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter770", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(22, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI32Set(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField22(oprot)
}

func (p *CompactProtoTestStruct) WriteField23(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64Set != nil {
		err = oprot.WriteFieldBegin("i64_set", thrift.SET, 23)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "i64_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I64, p.I64Set.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter771 := p.I64Set.Front(); Iter771 != nil; Iter771 = Iter771.Next() {
			Iter772 := Iter771.Value.(int64)
			err = oprot.WriteI64(int64(Iter772))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter772", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(23, "i64_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI64Set(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField23(oprot)
}

func (p *CompactProtoTestStruct) WriteField24(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleSet != nil {
		err = oprot.WriteFieldBegin("double_set", thrift.SET, 24)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "double_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.DOUBLE, p.DoubleSet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter773 := p.DoubleSet.Front(); Iter773 != nil; Iter773 = Iter773.Next() {
			Iter774 := Iter773.Value.(float64)
			err = oprot.WriteDouble(float64(Iter774))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter774", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(24, "double_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldDoubleSet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField24(oprot)
}

func (p *CompactProtoTestStruct) WriteField25(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringSet != nil {
		err = oprot.WriteFieldBegin("string_set", thrift.SET, 25)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "string_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.STRING, p.StringSet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter775 := p.StringSet.Front(); Iter775 != nil; Iter775 = Iter775.Next() {
			Iter776 := Iter775.Value.(string)
			err = oprot.WriteString(string(Iter776))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter776", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(25, "string_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldStringSet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField25(oprot)
}

func (p *CompactProtoTestStruct) WriteField26(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinarySet != nil {
		err = oprot.WriteFieldBegin("binary_set", thrift.SET, 26)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "binary_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.BINARY, p.BinarySet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter777 := p.BinarySet.Front(); Iter777 != nil; Iter777 = Iter777.Next() {
			Iter778 := Iter777.Value.([]byte)
			err = oprot.WriteBinary(Iter778)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter778", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(26, "binary_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBinarySet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField26(oprot)
}

func (p *CompactProtoTestStruct) WriteField27(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanSet != nil {
		err = oprot.WriteFieldBegin("boolean_set", thrift.SET, 27)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "boolean_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.BOOL, p.BooleanSet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter779 := p.BooleanSet.Front(); Iter779 != nil; Iter779 = Iter779.Next() {
			Iter780 := Iter779.Value.(bool)
			err = oprot.WriteBool(bool(Iter780))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter780", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(27, "boolean_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBooleanSet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField27(oprot)
}

func (p *CompactProtoTestStruct) WriteField28(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructSet != nil {
		err = oprot.WriteFieldBegin("struct_set", thrift.SET, 28)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(28, "struct_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.STRUCT, p.StructSet.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter781 := p.StructSet.Front(); Iter781 != nil; Iter781 = Iter781.Next() {
			Iter782 := Iter781.Value.(*Empty)
			err = Iter782.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Empty", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(28, "struct_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldStructSet(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField28(oprot)
}

func (p *CompactProtoTestStruct) WriteField29(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteByteMap != nil {
		err = oprot.WriteFieldBegin("byte_byte_map", thrift.MAP, 29)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "byte_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, p.ByteByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter783 := range p.ByteByteMap.Iter() {
			Kiter784, Viter785 := Miter783.Key().(int8), Miter783.Value().(int8)
			err = oprot.WriteByte(int8(Kiter784))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter784", "", err)
			}
			err = oprot.WriteByte(int8(Viter785))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter785", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(29, "byte_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField29(oprot)
}

func (p *CompactProtoTestStruct) WriteField30(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I16ByteMap != nil {
		err = oprot.WriteFieldBegin("i16_byte_map", thrift.MAP, 30)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(30, "i16_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I16, thrift.BYTE, p.I16ByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter786 := range p.I16ByteMap.Iter() {
			Kiter787, Viter788 := Miter786.Key().(int16), Miter786.Value().(int8)
			err = oprot.WriteI16(int16(Kiter787))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter787", "", err)
			}
			err = oprot.WriteByte(int8(Viter788))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter788", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(30, "i16_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI16ByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField30(oprot)
}

func (p *CompactProtoTestStruct) WriteField31(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32ByteMap != nil {
		err = oprot.WriteFieldBegin("i32_byte_map", thrift.MAP, 31)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "i32_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.BYTE, p.I32ByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter789 := range p.I32ByteMap.Iter() {
			Kiter790, Viter791 := Miter789.Key().(int32), Miter789.Value().(int8)
			err = oprot.WriteI32(int32(Kiter790))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter790", "", err)
			}
			err = oprot.WriteByte(int8(Viter791))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter791", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(31, "i32_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI32ByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField31(oprot)
}

func (p *CompactProtoTestStruct) WriteField32(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I64ByteMap != nil {
		err = oprot.WriteFieldBegin("i64_byte_map", thrift.MAP, 32)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(32, "i64_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I64, thrift.BYTE, p.I64ByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter792 := range p.I64ByteMap.Iter() {
			Kiter793, Viter794 := Miter792.Key().(int64), Miter792.Value().(int8)
			err = oprot.WriteI64(int64(Kiter793))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter793", "", err)
			}
			err = oprot.WriteByte(int8(Viter794))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter794", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(32, "i64_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldI64ByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField32(oprot)
}

func (p *CompactProtoTestStruct) WriteField33(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.DoubleByteMap != nil {
		err = oprot.WriteFieldBegin("double_byte_map", thrift.MAP, 33)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "double_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.DOUBLE, thrift.BYTE, p.DoubleByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter795 := range p.DoubleByteMap.Iter() {
			Kiter796, Viter797 := Miter795.Key().(float64), Miter795.Value().(int8)
			err = oprot.WriteDouble(float64(Kiter796))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter796", "", err)
			}
			err = oprot.WriteByte(int8(Viter797))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter797", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(33, "double_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldDoubleByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField33(oprot)
}

func (p *CompactProtoTestStruct) WriteField34(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StringByteMap != nil {
		err = oprot.WriteFieldBegin("string_byte_map", thrift.MAP, 34)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "string_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.BYTE, p.StringByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter798 := range p.StringByteMap.Iter() {
			Kiter799, Viter800 := Miter798.Key().(string), Miter798.Value().(int8)
			err = oprot.WriteString(string(Kiter799))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter799", "", err)
			}
			err = oprot.WriteByte(int8(Viter800))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter800", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(34, "string_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldStringByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField34(oprot)
}

func (p *CompactProtoTestStruct) WriteField35(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryByteMap != nil {
		err = oprot.WriteFieldBegin("binary_byte_map", thrift.MAP, 35)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(35, "binary_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BINARY, thrift.BYTE, p.BinaryByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter801 := range p.BinaryByteMap.Iter() {
			Kiter802, Viter803 := Miter801.Key().([]byte), Miter801.Value().(int8)
			err = oprot.WriteBinary(Kiter802)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter802", "", err)
			}
			err = oprot.WriteByte(int8(Viter803))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter803", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(35, "binary_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBinaryByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField35(oprot)
}

func (p *CompactProtoTestStruct) WriteField36(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BooleanByteMap != nil {
		err = oprot.WriteFieldBegin("boolean_byte_map", thrift.MAP, 36)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(36, "boolean_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BOOL, thrift.BYTE, p.BooleanByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter804 := range p.BooleanByteMap.Iter() {
			Kiter805, Viter806 := Miter804.Key().(bool), Miter804.Value().(int8)
			err = oprot.WriteBool(bool(Kiter805))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter805", "", err)
			}
			err = oprot.WriteByte(int8(Viter806))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter806", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(36, "boolean_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldBooleanByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField36(oprot)
}

func (p *CompactProtoTestStruct) WriteField37(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI16Map != nil {
		err = oprot.WriteFieldBegin("byte_i16_map", thrift.MAP, 37)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "byte_i16_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I16, p.ByteI16Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter807 := range p.ByteI16Map.Iter() {
			Kiter808, Viter809 := Miter807.Key().(int8), Miter807.Value().(int16)
			err = oprot.WriteByte(int8(Kiter808))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter808", "", err)
			}
			err = oprot.WriteI16(int16(Viter809))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter809", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(37, "byte_i16_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteI16Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField37(oprot)
}

func (p *CompactProtoTestStruct) WriteField38(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI32Map != nil {
		err = oprot.WriteFieldBegin("byte_i32_map", thrift.MAP, 38)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "byte_i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I32, p.ByteI32Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter810 := range p.ByteI32Map.Iter() {
			Kiter811, Viter812 := Miter810.Key().(int8), Miter810.Value().(int32)
			err = oprot.WriteByte(int8(Kiter811))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter811", "", err)
			}
			err = oprot.WriteI32(int32(Viter812))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter812", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(38, "byte_i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteI32Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField38(oprot)
}

func (p *CompactProtoTestStruct) WriteField39(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteI64Map != nil {
		err = oprot.WriteFieldBegin("byte_i64_map", thrift.MAP, 39)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "byte_i64_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.I64, p.ByteI64Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter813 := range p.ByteI64Map.Iter() {
			Kiter814, Viter815 := Miter813.Key().(int8), Miter813.Value().(int64)
			err = oprot.WriteByte(int8(Kiter814))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter814", "", err)
			}
			err = oprot.WriteI64(int64(Viter815))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter815", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(39, "byte_i64_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteI64Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField39(oprot)
}

func (p *CompactProtoTestStruct) WriteField40(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteDoubleMap != nil {
		err = oprot.WriteFieldBegin("byte_double_map", thrift.MAP, 40)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "byte_double_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.DOUBLE, p.ByteDoubleMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter816 := range p.ByteDoubleMap.Iter() {
			Kiter817, Viter818 := Miter816.Key().(int8), Miter816.Value().(float64)
			err = oprot.WriteByte(int8(Kiter817))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter817", "", err)
			}
			err = oprot.WriteDouble(float64(Viter818))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter818", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(40, "byte_double_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteDoubleMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField40(oprot)
}

func (p *CompactProtoTestStruct) WriteField41(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteStringMap != nil {
		err = oprot.WriteFieldBegin("byte_string_map", thrift.MAP, 41)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "byte_string_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.STRING, p.ByteStringMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter819 := range p.ByteStringMap.Iter() {
			Kiter820, Viter821 := Miter819.Key().(int8), Miter819.Value().(string)
			err = oprot.WriteByte(int8(Kiter820))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter820", "", err)
			}
			err = oprot.WriteString(string(Viter821))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter821", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(41, "byte_string_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteStringMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField41(oprot)
}

func (p *CompactProtoTestStruct) WriteField42(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteBinaryMap != nil {
		err = oprot.WriteFieldBegin("byte_binary_map", thrift.MAP, 42)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "byte_binary_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.BINARY, p.ByteBinaryMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter822 := range p.ByteBinaryMap.Iter() {
			Kiter823, Viter824 := Miter822.Key().(int8), Miter822.Value().([]byte)
			err = oprot.WriteByte(int8(Kiter823))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter823", "", err)
			}
			err = oprot.WriteBinary(Viter824)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter824", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(42, "byte_binary_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteBinaryMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField42(oprot)
}

func (p *CompactProtoTestStruct) WriteField43(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteBooleanMap != nil {
		err = oprot.WriteFieldBegin("byte_boolean_map", thrift.MAP, 43)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(43, "byte_boolean_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.BOOL, p.ByteBooleanMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter825 := range p.ByteBooleanMap.Iter() {
			Kiter826, Viter827 := Miter825.Key().(int8), Miter825.Value().(bool)
			err = oprot.WriteByte(int8(Kiter826))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter826", "", err)
			}
			err = oprot.WriteBool(bool(Viter827))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter827", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(43, "byte_boolean_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteBooleanMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField43(oprot)
}

func (p *CompactProtoTestStruct) WriteField44(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ListByteMap != nil {
		err = oprot.WriteFieldBegin("list_byte_map", thrift.MAP, 44)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(44, "list_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.LIST, thrift.BYTE, p.ListByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter828 := range p.ListByteMap.Iter() {
			Kiter829, Viter830 := Miter828.Key().(thrift.TList), Miter828.Value().(int8)
			err = oprot.WriteListBegin(thrift.BYTE, Kiter829.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter831 := range Kiter829.Iter() {
				Iter832 := Iter831.(int8)
				err = oprot.WriteByte(int8(Iter832))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter832", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteByte(int8(Viter830))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter830", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(44, "list_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldListByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField44(oprot)
}

func (p *CompactProtoTestStruct) WriteField45(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SetByteMap != nil {
		err = oprot.WriteFieldBegin("set_byte_map", thrift.MAP, 45)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(45, "set_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.SET, thrift.BYTE, p.SetByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter833 := range p.SetByteMap.Iter() {
			Kiter834, Viter835 := Miter833.Key().(thrift.TSet), Miter833.Value().(int8)
			err = oprot.WriteSetBegin(thrift.BYTE, Kiter834.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter836 := Kiter834.Front(); Iter836 != nil; Iter836 = Iter836.Next() {
				Iter837 := Iter836.Value.(int8)
				err = oprot.WriteByte(int8(Iter837))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter837", "", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			err = oprot.WriteByte(int8(Viter835))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter835", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(45, "set_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldSetByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField45(oprot)
}

func (p *CompactProtoTestStruct) WriteField46(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MapByteMap != nil {
		err = oprot.WriteFieldBegin("map_byte_map", thrift.MAP, 46)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(46, "map_byte_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.MAP, thrift.BYTE, p.MapByteMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter838 := range p.MapByteMap.Iter() {
			Kiter839, Viter840 := Miter838.Key().(thrift.TMap), Miter838.Value().(int8)
			err = oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, Kiter839.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter841 := range Kiter839.Iter() {
				Kiter842, Viter843 := Miter841.Key().(int8), Miter841.Value().(int8)
				err = oprot.WriteByte(int8(Kiter842))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter842", "", err)
				}
				err = oprot.WriteByte(int8(Viter843))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter843", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			err = oprot.WriteByte(int8(Viter840))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter840", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(46, "map_byte_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldMapByteMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField46(oprot)
}

func (p *CompactProtoTestStruct) WriteField47(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteMapMap != nil {
		err = oprot.WriteFieldBegin("byte_map_map", thrift.MAP, 47)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(47, "byte_map_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.MAP, p.ByteMapMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter844 := range p.ByteMapMap.Iter() {
			Kiter845, Viter846 := Miter844.Key().(int8), Miter844.Value().(thrift.TMap)
			err = oprot.WriteByte(int8(Kiter845))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter845", "", err)
			}
			err = oprot.WriteMapBegin(thrift.BYTE, thrift.BYTE, Viter846.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
			for Miter847 := range Viter846.Iter() {
				Kiter848, Viter849 := Miter847.Key().(int8), Miter847.Value().(int8)
				err = oprot.WriteByte(int8(Kiter848))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Kiter848", "", err)
				}
				err = oprot.WriteByte(int8(Viter849))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Viter849", "", err)
				}
			}
			err = oprot.WriteMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(47, "byte_map_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteMapMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField47(oprot)
}

func (p *CompactProtoTestStruct) WriteField48(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteSetMap != nil {
		err = oprot.WriteFieldBegin("byte_set_map", thrift.MAP, 48)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(48, "byte_set_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.SET, p.ByteSetMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter850 := range p.ByteSetMap.Iter() {
			Kiter851, Viter852 := Miter850.Key().(int8), Miter850.Value().(thrift.TSet)
			err = oprot.WriteByte(int8(Kiter851))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter851", "", err)
			}
			err = oprot.WriteSetBegin(thrift.BYTE, Viter852.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter853 := Viter852.Front(); Iter853 != nil; Iter853 = Iter853.Next() {
				Iter854 := Iter853.Value.(int8)
				err = oprot.WriteByte(int8(Iter854))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter854", "", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(48, "byte_set_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteSetMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField48(oprot)
}

func (p *CompactProtoTestStruct) WriteField49(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ByteListMap != nil {
		err = oprot.WriteFieldBegin("byte_list_map", thrift.MAP, 49)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(49, "byte_list_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.BYTE, thrift.LIST, p.ByteListMap.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter855 := range p.ByteListMap.Iter() {
			Kiter856, Viter857 := Miter855.Key().(int8), Miter855.Value().(thrift.TList)
			err = oprot.WriteByte(int8(Kiter856))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter856", "", err)
			}
			err = oprot.WriteListBegin(thrift.BYTE, Viter857.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter858 := range Viter857.Iter() {
				Iter859 := Iter858.(int8)
				err = oprot.WriteByte(int8(Iter859))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter859", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(49, "byte_list_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactProtoTestStruct) WriteFieldByteListMap(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField49(oprot)
}

func (p *CompactProtoTestStruct) TStructName() string {
	return "CompactProtoTestStruct"
}

func (p *CompactProtoTestStruct) ThriftName() string {
	return "CompactProtoTestStruct"
}

func (p *CompactProtoTestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactProtoTestStruct(%+v)", *p)
}

func (p *CompactProtoTestStruct) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*CompactProtoTestStruct)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *CompactProtoTestStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.AByte
	case 2:
		return p.AI16
	case 3:
		return p.AI32
	case 4:
		return p.AI64
	case 5:
		return p.ADouble
	case 6:
		return p.AString
	case 7:
		return p.ABinary
	case 8:
		return p.TrueField
	case 9:
		return p.FalseField
	case 10:
		return p.EmptyStructField
	case 11:
		return p.ByteList
	case 12:
		return p.I16List
	case 13:
		return p.I32List
	case 14:
		return p.I64List
	case 15:
		return p.DoubleList
	case 16:
		return p.StringList
	case 17:
		return p.BinaryList
	case 18:
		return p.BooleanList
	case 19:
		return p.StructList
	case 20:
		return p.ByteSet
	case 21:
		return p.I16Set
	case 22:
		return p.I32Set
	case 23:
		return p.I64Set
	case 24:
		return p.DoubleSet
	case 25:
		return p.StringSet
	case 26:
		return p.BinarySet
	case 27:
		return p.BooleanSet
	case 28:
		return p.StructSet
	case 29:
		return p.ByteByteMap
	case 30:
		return p.I16ByteMap
	case 31:
		return p.I32ByteMap
	case 32:
		return p.I64ByteMap
	case 33:
		return p.DoubleByteMap
	case 34:
		return p.StringByteMap
	case 35:
		return p.BinaryByteMap
	case 36:
		return p.BooleanByteMap
	case 37:
		return p.ByteI16Map
	case 38:
		return p.ByteI32Map
	case 39:
		return p.ByteI64Map
	case 40:
		return p.ByteDoubleMap
	case 41:
		return p.ByteStringMap
	case 42:
		return p.ByteBinaryMap
	case 43:
		return p.ByteBooleanMap
	case 44:
		return p.ListByteMap
	case 45:
		return p.SetByteMap
	case 46:
		return p.MapByteMap
	case 47:
		return p.ByteMapMap
	case 48:
		return p.ByteSetMap
	case 49:
		return p.ByteListMap
	}
	return nil
}

func (p *CompactProtoTestStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("a_byte", thrift.BYTE, 1),
		thrift.NewTField("a_i16", thrift.I16, 2),
		thrift.NewTField("a_i32", thrift.I32, 3),
		thrift.NewTField("a_i64", thrift.I64, 4),
		thrift.NewTField("a_double", thrift.DOUBLE, 5),
		thrift.NewTField("a_string", thrift.STRING, 6),
		thrift.NewTField("a_binary", thrift.BINARY, 7),
		thrift.NewTField("true_field", thrift.BOOL, 8),
		thrift.NewTField("false_field", thrift.BOOL, 9),
		thrift.NewTField("empty_struct_field", thrift.STRUCT, 10),
		thrift.NewTField("byte_list", thrift.LIST, 11),
		thrift.NewTField("i16_list", thrift.LIST, 12),
		thrift.NewTField("i32_list", thrift.LIST, 13),
		thrift.NewTField("i64_list", thrift.LIST, 14),
		thrift.NewTField("double_list", thrift.LIST, 15),
		thrift.NewTField("string_list", thrift.LIST, 16),
		thrift.NewTField("binary_list", thrift.LIST, 17),
		thrift.NewTField("boolean_list", thrift.LIST, 18),
		thrift.NewTField("struct_list", thrift.LIST, 19),
		thrift.NewTField("byte_set", thrift.SET, 20),
		thrift.NewTField("i16_set", thrift.SET, 21),
		thrift.NewTField("i32_set", thrift.SET, 22),
		thrift.NewTField("i64_set", thrift.SET, 23),
		thrift.NewTField("double_set", thrift.SET, 24),
		thrift.NewTField("string_set", thrift.SET, 25),
		thrift.NewTField("binary_set", thrift.SET, 26),
		thrift.NewTField("boolean_set", thrift.SET, 27),
		thrift.NewTField("struct_set", thrift.SET, 28),
		thrift.NewTField("byte_byte_map", thrift.MAP, 29),
		thrift.NewTField("i16_byte_map", thrift.MAP, 30),
		thrift.NewTField("i32_byte_map", thrift.MAP, 31),
		thrift.NewTField("i64_byte_map", thrift.MAP, 32),
		thrift.NewTField("double_byte_map", thrift.MAP, 33),
		thrift.NewTField("string_byte_map", thrift.MAP, 34),
		thrift.NewTField("binary_byte_map", thrift.MAP, 35),
		thrift.NewTField("boolean_byte_map", thrift.MAP, 36),
		thrift.NewTField("byte_i16_map", thrift.MAP, 37),
		thrift.NewTField("byte_i32_map", thrift.MAP, 38),
		thrift.NewTField("byte_i64_map", thrift.MAP, 39),
		thrift.NewTField("byte_double_map", thrift.MAP, 40),
		thrift.NewTField("byte_string_map", thrift.MAP, 41),
		thrift.NewTField("byte_binary_map", thrift.MAP, 42),
		thrift.NewTField("byte_boolean_map", thrift.MAP, 43),
		thrift.NewTField("list_byte_map", thrift.MAP, 44),
		thrift.NewTField("set_byte_map", thrift.MAP, 45),
		thrift.NewTField("map_byte_map", thrift.MAP, 46),
		thrift.NewTField("byte_map_map", thrift.MAP, 47),
		thrift.NewTField("byte_set_map", thrift.MAP, 48),
		thrift.NewTField("byte_list_map", thrift.MAP, 49),
	})
}

/**
 * Attributes:
 *  - I32Map
 */
type SingleMapTestStruct struct {
	I32Map thrift.TMap "i32_map" // 1
}

var tstructSingleMapTestStruct = thrift.NewTStruct("SingleMapTestStruct", []thrift.TField{
	thrift.NewTField("i32_map", thrift.MAP, 1),
})

func (*SingleMapTestStruct) GetTStruct() thrift.TStruct { return tstructSingleMapTestStruct }
func NewSingleMapTestStruct() *SingleMapTestStruct {
	output := &SingleMapTestStruct{}
	{
	}
	return output
}

func (p *SingleMapTestStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructSingleMapTestStruct.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructSingleMapTestStruct.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructSingleMapTestStruct.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "i32_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SingleMapTestStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype863, _vtype864, _size862, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	p.I32Map = thrift.NewTMap(_ktype863, _vtype864, _size862)
	for _i866 := 0; _i866 < _size862; _i866++ {
		v869, err870 := iprot.ReadI32()
		if err870 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key867", "", err870)
		}
		_key867 := v869
		v871, err872 := iprot.ReadI32()
		if err872 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val868", "", err872)
		}
		_val868 := v871
		p.I32Map.Set(_key867, _val868)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *SingleMapTestStruct) ReadFieldI32Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *SingleMapTestStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("SingleMapTestStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *SingleMapTestStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, p.I32Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter873 := range p.I32Map.Iter() {
			Kiter874, Viter875 := Miter873.Key().(int32), Miter873.Value().(int32)
			err = oprot.WriteI32(int32(Kiter874))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter874", "", err)
			}
			err = oprot.WriteI32(int32(Viter875))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter875", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *SingleMapTestStruct) WriteFieldI32Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *SingleMapTestStruct) TStructName() string {
	return "SingleMapTestStruct"
}

func (p *SingleMapTestStruct) ThriftName() string {
	return "SingleMapTestStruct"
}

func (p *SingleMapTestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SingleMapTestStruct(%+v)", *p)
}

func (p *SingleMapTestStruct) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*SingleMapTestStruct)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *SingleMapTestStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.I32Map
	}
	return nil
}

func (p *SingleMapTestStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("i32_map", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 *  - MapField
 */
type ExceptionWithAMap struct {
	Blah     string      "blah"      // 1
	MapField thrift.TMap "map_field" // 2
}

var tstructExceptionWithAMap = thrift.NewTStruct("ExceptionWithAMap", []thrift.TField{
	thrift.NewTField("blah", thrift.STRING, 1),
	thrift.NewTField("map_field", thrift.MAP, 2),
})

func (*ExceptionWithAMap) GetTStruct() thrift.TStruct { return tstructExceptionWithAMap }
func NewExceptionWithAMap() *ExceptionWithAMap {
	output := &ExceptionWithAMap{}
	{
	}
	return output
}

func (p *ExceptionWithAMap) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructExceptionWithAMap.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructExceptionWithAMap.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructExceptionWithAMap.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "blah" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "map_field" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v876, err877 := iprot.ReadString()
	if err877 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err877)
	}
	p.Blah = v876
	return err
}

func (p *ExceptionWithAMap) ReadFieldBlah(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ExceptionWithAMap) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype881, _vtype882, _size880, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.MapField", "", err)
	}
	p.MapField = thrift.NewTMap(_ktype881, _vtype882, _size880)
	for _i884 := 0; _i884 < _size880; _i884++ {
		v887, err888 := iprot.ReadString()
		if err888 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key885", "", err888)
		}
		_key885 := v887
		v889, err890 := iprot.ReadString()
		if err890 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val886", "", err890)
		}
		_val886 := v889
		p.MapField.Set(_key885, _val886)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ExceptionWithAMap) ReadFieldMapField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ExceptionWithAMap) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ExceptionWithAMap")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Blah))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	return err
}

func (p *ExceptionWithAMap) WriteFieldBlah(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ExceptionWithAMap) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.MapField != nil {
		err = oprot.WriteFieldBegin("map_field", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "map_field", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.MapField.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter891 := range p.MapField.Iter() {
			Kiter892, Viter893 := Miter891.Key().(string), Miter891.Value().(string)
			err = oprot.WriteString(string(Kiter892))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter892", "", err)
			}
			err = oprot.WriteString(string(Viter893))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter893", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "map_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ExceptionWithAMap) WriteFieldMapField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ExceptionWithAMap) TStructName() string {
	return "ExceptionWithAMap"
}

func (p *ExceptionWithAMap) ThriftName() string {
	return "ExceptionWithAMap"
}

func (p *ExceptionWithAMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExceptionWithAMap(%+v)", *p)
}

func (p *ExceptionWithAMap) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ExceptionWithAMap)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ExceptionWithAMap) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	case 2:
		return p.MapField
	}
	return nil
}

func (p *ExceptionWithAMap) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.STRING, 1),
		thrift.NewTField("map_field", thrift.MAP, 2),
	})
}

/**
 * Attributes:
 *  - B1
 *  - B2
 *  - B3
 *  - B4
 */
type BlowUp struct {
	B1 thrift.TMap "b1" // 1
	B2 thrift.TMap "b2" // 2
	B3 thrift.TMap "b3" // 3
	B4 thrift.TMap "b4" // 4
}

var tstructBlowUp = thrift.NewTStruct("BlowUp", []thrift.TField{
	thrift.NewTField("b1", thrift.MAP, 1),
	thrift.NewTField("b2", thrift.MAP, 2),
	thrift.NewTField("b3", thrift.MAP, 3),
	thrift.NewTField("b4", thrift.MAP, 4),
})

func (*BlowUp) GetTStruct() thrift.TStruct { return tstructBlowUp }
func NewBlowUp() *BlowUp {
	output := &BlowUp{}
	{
	}
	return output
}

func (p *BlowUp) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBlowUp.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBlowUp.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBlowUp.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "b1" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "b2" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "b3" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "b4" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BlowUp) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype897, _vtype898, _size896, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.B1", "", err)
	}
	p.B1 = thrift.NewTMap(_ktype897, _vtype898, _size896)
	for _i900 := 0; _i900 < _size896; _i900++ {
		_etype908, _size905, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key901", "", err)
		}
		_key901 := thrift.NewTList(_etype908, _size905)
		for _i909 := 0; _i909 < _size905; _i909++ {
			v911, err912 := iprot.ReadI32()
			if err912 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem910", "", err912)
			}
			_elem910 := v911
			_key901.Push(_elem910)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		_etype918, _size915, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val902", "", err)
		}
		_val902 := thrift.NewTSet(_etype918, _size915)
		for _i919 := 0; _i919 < _size915; _i919++ {
			_ktype924, _vtype925, _size923, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_elem920", "", err)
			}
			_elem920 := thrift.NewTMap(_ktype924, _vtype925, _size923)
			for _i927 := 0; _i927 < _size923; _i927++ {
				v930, err931 := iprot.ReadI32()
				if err931 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_key928", "", err931)
				}
				_key928 := v930
				v932, err933 := iprot.ReadString()
				if err933 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_val929", "", err933)
				}
				_val929 := v932
				_elem920.Set(_key928, _val929)
			}
			err = iprot.ReadMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
			}
			_val902.Add(_elem920)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.B1.Set(_key901, _val902)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BlowUp) ReadFieldB1(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BlowUp) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype937, _vtype938, _size936, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.B2", "", err)
	}
	p.B2 = thrift.NewTMap(_ktype937, _vtype938, _size936)
	for _i940 := 0; _i940 < _size936; _i940++ {
		_etype948, _size945, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key941", "", err)
		}
		_key941 := thrift.NewTList(_etype948, _size945)
		for _i949 := 0; _i949 < _size945; _i949++ {
			v951, err952 := iprot.ReadI32()
			if err952 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem950", "", err952)
			}
			_elem950 := v951
			_key941.Push(_elem950)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		_etype958, _size955, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val942", "", err)
		}
		_val942 := thrift.NewTSet(_etype958, _size955)
		for _i959 := 0; _i959 < _size955; _i959++ {
			_ktype964, _vtype965, _size963, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_elem960", "", err)
			}
			_elem960 := thrift.NewTMap(_ktype964, _vtype965, _size963)
			for _i967 := 0; _i967 < _size963; _i967++ {
				v970, err971 := iprot.ReadI32()
				if err971 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_key968", "", err971)
				}
				_key968 := v970
				v972, err973 := iprot.ReadString()
				if err973 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_val969", "", err973)
				}
				_val969 := v972
				_elem960.Set(_key968, _val969)
			}
			err = iprot.ReadMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
			}
			_val942.Add(_elem960)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.B2.Set(_key941, _val942)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BlowUp) ReadFieldB2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *BlowUp) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype977, _vtype978, _size976, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.B3", "", err)
	}
	p.B3 = thrift.NewTMap(_ktype977, _vtype978, _size976)
	for _i980 := 0; _i980 < _size976; _i980++ {
		_etype988, _size985, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key981", "", err)
		}
		_key981 := thrift.NewTList(_etype988, _size985)
		for _i989 := 0; _i989 < _size985; _i989++ {
			v991, err992 := iprot.ReadI32()
			if err992 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem990", "", err992)
			}
			_elem990 := v991
			_key981.Push(_elem990)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		_etype998, _size995, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val982", "", err)
		}
		_val982 := thrift.NewTSet(_etype998, _size995)
		for _i999 := 0; _i999 < _size995; _i999++ {
			_ktype1004, _vtype1005, _size1003, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_elem1000", "", err)
			}
			_elem1000 := thrift.NewTMap(_ktype1004, _vtype1005, _size1003)
			for _i1007 := 0; _i1007 < _size1003; _i1007++ {
				v1010, err1011 := iprot.ReadI32()
				if err1011 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_key1008", "", err1011)
				}
				_key1008 := v1010
				v1012, err1013 := iprot.ReadString()
				if err1013 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_val1009", "", err1013)
				}
				_val1009 := v1012
				_elem1000.Set(_key1008, _val1009)
			}
			err = iprot.ReadMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
			}
			_val982.Add(_elem1000)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.B3.Set(_key981, _val982)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BlowUp) ReadFieldB3(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *BlowUp) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1017, _vtype1018, _size1016, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.B4", "", err)
	}
	p.B4 = thrift.NewTMap(_ktype1017, _vtype1018, _size1016)
	for _i1020 := 0; _i1020 < _size1016; _i1020++ {
		_etype1028, _size1025, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_key1021", "", err)
		}
		_key1021 := thrift.NewTList(_etype1028, _size1025)
		for _i1029 := 0; _i1029 < _size1025; _i1029++ {
			v1031, err1032 := iprot.ReadI32()
			if err1032 != nil {
				return thrift.NewTProtocolExceptionReadField(0, "_elem1030", "", err1032)
			}
			_elem1030 := v1031
			_key1021.Push(_elem1030)
		}
		err = iprot.ReadListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
		}
		_etype1038, _size1035, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "_val1022", "", err)
		}
		_val1022 := thrift.NewTSet(_etype1038, _size1035)
		for _i1039 := 0; _i1039 < _size1035; _i1039++ {
			_ktype1044, _vtype1045, _size1043, err := iprot.ReadMapBegin()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "_elem1040", "", err)
			}
			_elem1040 := thrift.NewTMap(_ktype1044, _vtype1045, _size1043)
			for _i1047 := 0; _i1047 < _size1043; _i1047++ {
				v1050, err1051 := iprot.ReadI32()
				if err1051 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_key1048", "", err1051)
				}
				_key1048 := v1050
				v1052, err1053 := iprot.ReadString()
				if err1053 != nil {
					return thrift.NewTProtocolExceptionReadField(0, "_val1049", "", err1053)
				}
				_val1049 := v1052
				_elem1040.Set(_key1048, _val1049)
			}
			err = iprot.ReadMapEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
			}
			_val1022.Add(_elem1040)
		}
		err = iprot.ReadSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
		}
		p.B4.Set(_key1021, _val1022)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *BlowUp) ReadFieldB4(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *BlowUp) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BlowUp")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BlowUp) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B1 != nil {
		err = oprot.WriteFieldBegin("b1", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "b1", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.LIST, thrift.SET, p.B1.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1054 := range p.B1.Iter() {
			Kiter1055, Viter1056 := Miter1054.Key().(thrift.TList), Miter1054.Value().(thrift.TSet)
			err = oprot.WriteListBegin(thrift.I32, Kiter1055.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter1057 := range Kiter1055.Iter() {
				Iter1058 := Iter1057.(int32)
				err = oprot.WriteI32(int32(Iter1058))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter1058", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteSetBegin(thrift.MAP, Viter1056.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter1059 := Viter1056.Front(); Iter1059 != nil; Iter1059 = Iter1059.Next() {
				Iter1060 := Iter1059.Value.(thrift.TMap)
				err = oprot.WriteMapBegin(thrift.I32, thrift.STRING, Iter1060.Len())
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
				for Miter1061 := range Iter1060.Iter() {
					Kiter1062, Viter1063 := Miter1061.Key().(int32), Miter1061.Value().(string)
					err = oprot.WriteI32(int32(Kiter1062))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Kiter1062", "", err)
					}
					err = oprot.WriteString(string(Viter1063))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Viter1063", "", err)
					}
				}
				err = oprot.WriteMapEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "b1", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BlowUp) WriteFieldB1(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BlowUp) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B2 != nil {
		err = oprot.WriteFieldBegin("b2", thrift.MAP, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b2", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.LIST, thrift.SET, p.B2.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1064 := range p.B2.Iter() {
			Kiter1065, Viter1066 := Miter1064.Key().(thrift.TList), Miter1064.Value().(thrift.TSet)
			err = oprot.WriteListBegin(thrift.I32, Kiter1065.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter1067 := range Kiter1065.Iter() {
				Iter1068 := Iter1067.(int32)
				err = oprot.WriteI32(int32(Iter1068))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter1068", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteSetBegin(thrift.MAP, Viter1066.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter1069 := Viter1066.Front(); Iter1069 != nil; Iter1069 = Iter1069.Next() {
				Iter1070 := Iter1069.Value.(thrift.TMap)
				err = oprot.WriteMapBegin(thrift.I32, thrift.STRING, Iter1070.Len())
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
				for Miter1071 := range Iter1070.Iter() {
					Kiter1072, Viter1073 := Miter1071.Key().(int32), Miter1071.Value().(string)
					err = oprot.WriteI32(int32(Kiter1072))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Kiter1072", "", err)
					}
					err = oprot.WriteString(string(Viter1073))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Viter1073", "", err)
					}
				}
				err = oprot.WriteMapEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "b2", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BlowUp) WriteFieldB2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *BlowUp) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B3 != nil {
		err = oprot.WriteFieldBegin("b3", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b3", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.LIST, thrift.SET, p.B3.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1074 := range p.B3.Iter() {
			Kiter1075, Viter1076 := Miter1074.Key().(thrift.TList), Miter1074.Value().(thrift.TSet)
			err = oprot.WriteListBegin(thrift.I32, Kiter1075.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter1077 := range Kiter1075.Iter() {
				Iter1078 := Iter1077.(int32)
				err = oprot.WriteI32(int32(Iter1078))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter1078", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteSetBegin(thrift.MAP, Viter1076.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter1079 := Viter1076.Front(); Iter1079 != nil; Iter1079 = Iter1079.Next() {
				Iter1080 := Iter1079.Value.(thrift.TMap)
				err = oprot.WriteMapBegin(thrift.I32, thrift.STRING, Iter1080.Len())
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
				for Miter1081 := range Iter1080.Iter() {
					Kiter1082, Viter1083 := Miter1081.Key().(int32), Miter1081.Value().(string)
					err = oprot.WriteI32(int32(Kiter1082))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Kiter1082", "", err)
					}
					err = oprot.WriteString(string(Viter1083))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Viter1083", "", err)
					}
				}
				err = oprot.WriteMapEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "b3", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BlowUp) WriteFieldB3(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *BlowUp) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.B4 != nil {
		err = oprot.WriteFieldBegin("b4", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b4", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.LIST, thrift.SET, p.B4.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1084 := range p.B4.Iter() {
			Kiter1085, Viter1086 := Miter1084.Key().(thrift.TList), Miter1084.Value().(thrift.TSet)
			err = oprot.WriteListBegin(thrift.I32, Kiter1085.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			for Iter1087 := range Kiter1085.Iter() {
				Iter1088 := Iter1087.(int32)
				err = oprot.WriteI32(int32(Iter1088))
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(0, "Iter1088", "", err)
				}
			}
			err = oprot.WriteListEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
			}
			err = oprot.WriteSetBegin(thrift.MAP, Viter1086.Len())
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
			for Iter1089 := Viter1086.Front(); Iter1089 != nil; Iter1089 = Iter1089.Next() {
				Iter1090 := Iter1089.Value.(thrift.TMap)
				err = oprot.WriteMapBegin(thrift.I32, thrift.STRING, Iter1090.Len())
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
				for Miter1091 := range Iter1090.Iter() {
					Kiter1092, Viter1093 := Miter1091.Key().(int32), Miter1091.Value().(string)
					err = oprot.WriteI32(int32(Kiter1092))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Kiter1092", "", err)
					}
					err = oprot.WriteString(string(Viter1093))
					if err != nil {
						return thrift.NewTProtocolExceptionWriteField(0, "Viter1093", "", err)
					}
				}
				err = oprot.WriteMapEnd()
				if err != nil {
					return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
				}
			}
			err = oprot.WriteSetEnd()
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "b4", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BlowUp) WriteFieldB4(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *BlowUp) TStructName() string {
	return "BlowUp"
}

func (p *BlowUp) ThriftName() string {
	return "BlowUp"
}

func (p *BlowUp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlowUp(%+v)", *p)
}

func (p *BlowUp) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BlowUp)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *BlowUp) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.B1
	case 2:
		return p.B2
	case 3:
		return p.B3
	case 4:
		return p.B4
	}
	return nil
}

func (p *BlowUp) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("b1", thrift.MAP, 1),
		thrift.NewTField("b2", thrift.MAP, 2),
		thrift.NewTField("b3", thrift.MAP, 3),
		thrift.NewTField("b4", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - First
 *  - Second
 *  - Third
 *  - Fourth
 */
type ReverseOrderStruct struct {
	Fourth int64  "fourth" // 1
	Third  int32  "third"  // 2
	Second int16  "second" // 3
	First  string "first"  // 4
}

var tstructReverseOrderStruct = thrift.NewTStruct("ReverseOrderStruct", []thrift.TField{
	thrift.NewTField("first", thrift.STRING, 4),
	thrift.NewTField("second", thrift.I16, 3),
	thrift.NewTField("third", thrift.I32, 2),
	thrift.NewTField("fourth", thrift.I64, 1),
})

func (*ReverseOrderStruct) GetTStruct() thrift.TStruct { return tstructReverseOrderStruct }
func NewReverseOrderStruct() *ReverseOrderStruct {
	output := &ReverseOrderStruct{}
	{
	}
	return output
}

func (p *ReverseOrderStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructReverseOrderStruct.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructReverseOrderStruct.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructReverseOrderStruct.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 4 || fieldName == "first" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "second" {
			if fieldTypeId == thrift.I16 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "third" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 1 || fieldName == "fourth" {
			if fieldTypeId == thrift.I64 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1094, err1095 := iprot.ReadString()
	if err1095 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "first", p.ThriftName(), err1095)
	}
	p.First = v1094
	return err
}

func (p *ReverseOrderStruct) ReadFieldFirst(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *ReverseOrderStruct) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1096, err1097 := iprot.ReadI16()
	if err1097 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "second", p.ThriftName(), err1097)
	}
	p.Second = v1096
	return err
}

func (p *ReverseOrderStruct) ReadFieldSecond(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *ReverseOrderStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1098, err1099 := iprot.ReadI32()
	if err1099 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "third", p.ThriftName(), err1099)
	}
	p.Third = v1098
	return err
}

func (p *ReverseOrderStruct) ReadFieldThird(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ReverseOrderStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1100, err1101 := iprot.ReadI64()
	if err1101 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "fourth", p.ThriftName(), err1101)
	}
	p.Fourth = v1100
	return err
}

func (p *ReverseOrderStruct) ReadFieldFourth(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ReverseOrderStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ReverseOrderStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("fourth", thrift.I64, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Fourth))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "fourth", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) WriteFieldFourth(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ReverseOrderStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("third", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Third))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "third", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) WriteFieldThird(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ReverseOrderStruct) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("second", thrift.I16, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteI16(int16(p.Second))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "second", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) WriteFieldSecond(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *ReverseOrderStruct) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("first", thrift.STRING, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.First))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "first", p.ThriftName(), err)
	}
	return err
}

func (p *ReverseOrderStruct) WriteFieldFirst(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *ReverseOrderStruct) TStructName() string {
	return "ReverseOrderStruct"
}

func (p *ReverseOrderStruct) ThriftName() string {
	return "ReverseOrderStruct"
}

func (p *ReverseOrderStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReverseOrderStruct(%+v)", *p)
}

func (p *ReverseOrderStruct) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ReverseOrderStruct)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ReverseOrderStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 4:
		return p.First
	case 3:
		return p.Second
	case 2:
		return p.Third
	case 1:
		return p.Fourth
	}
	return nil
}

func (p *ReverseOrderStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("first", thrift.STRING, 4),
		thrift.NewTField("second", thrift.I16, 3),
		thrift.NewTField("third", thrift.I32, 2),
		thrift.NewTField("fourth", thrift.I64, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 */
type StructWithSomeEnum struct {
	Blah SomeEnum "blah" // 1
}

var tstructStructWithSomeEnum = thrift.NewTStruct("StructWithSomeEnum", []thrift.TField{
	thrift.NewTField("blah", thrift.I32, 1),
})

func (*StructWithSomeEnum) GetTStruct() thrift.TStruct { return tstructStructWithSomeEnum }
func NewStructWithSomeEnum() *StructWithSomeEnum {
	output := &StructWithSomeEnum{}
	{
		output.Blah = math.MinInt32 - 1
	}
	return output
}

func (p *StructWithSomeEnum) IsSetBlah() bool {
	return int64(p.Blah) != math.MinInt32-1
}

func (p *StructWithSomeEnum) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithSomeEnum.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructStructWithSomeEnum.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructStructWithSomeEnum.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "blah" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithSomeEnum) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1102, err1103 := iprot.ReadI32()
	if err1103 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err1103)
	}
	p.Blah = SomeEnum(v1102)
	return err
}

func (p *StructWithSomeEnum) ReadFieldBlah(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *StructWithSomeEnum) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithSomeEnum")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithSomeEnum) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetBlah() {
		err = oprot.WriteFieldBegin("blah", thrift.I32, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.Blah))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithSomeEnum) WriteFieldBlah(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *StructWithSomeEnum) TStructName() string {
	return "StructWithSomeEnum"
}

func (p *StructWithSomeEnum) ThriftName() string {
	return "StructWithSomeEnum"
}

func (p *StructWithSomeEnum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructWithSomeEnum(%+v)", *p)
}

func (p *StructWithSomeEnum) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*StructWithSomeEnum)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StructWithSomeEnum) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	}
	return nil
}

func (p *StructWithSomeEnum) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - StringField: A doc string
 *  - I32Field
 *  - StructField
 *  - StructList
 *  - OtherI32Field
 *  - EnumField
 *  - I32Set
 *  - I32Map
 */
type TestUnion struct {
	StringField   string       "string_field"    // 1
	I32Field      int32        "i32_field"       // 2
	StructField   *OneOfEach   "struct_field"    // 3
	StructList    thrift.TList "struct_list"     // 4
	OtherI32Field int32        "other_i32_field" // 5
	EnumField     SomeEnum     "enum_field"      // 6
	I32Set        thrift.TSet  "i32_set"         // 7
	I32Map        thrift.TMap  "i32_map"         // 8
}

var tstructTestUnion = thrift.NewTStruct("TestUnion", []thrift.TField{
	thrift.NewTField("string_field", thrift.STRING, 1),
	thrift.NewTField("i32_field", thrift.I32, 2),
	thrift.NewTField("struct_field", thrift.STRUCT, 3),
	thrift.NewTField("struct_list", thrift.LIST, 4),
	thrift.NewTField("other_i32_field", thrift.I32, 5),
	thrift.NewTField("enum_field", thrift.I32, 6),
	thrift.NewTField("i32_set", thrift.SET, 7),
	thrift.NewTField("i32_map", thrift.MAP, 8),
})

func (*TestUnion) GetTStruct() thrift.TStruct { return tstructTestUnion }
func NewTestUnion() *TestUnion {
	output := &TestUnion{}
	{
		output.EnumField = math.MinInt32 - 1
	}
	return output
}

func (p *TestUnion) IsSetEnumField() bool {
	return int64(p.EnumField) != math.MinInt32-1
}

func (p *TestUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTestUnion.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructTestUnion.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructTestUnion.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "string_field" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "i32_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "struct_field" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "struct_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "other_i32_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "enum_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "i32_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "i32_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1104, err1105 := iprot.ReadString()
	if err1105 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "string_field", p.ThriftName(), err1105)
	}
	p.StringField = v1104
	return err
}

func (p *TestUnion) ReadFieldStringField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *TestUnion) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1106, err1107 := iprot.ReadI32()
	if err1107 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "i32_field", p.ThriftName(), err1107)
	}
	p.I32Field = v1106
	return err
}

func (p *TestUnion) ReadFieldI32Field(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TestUnion) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.StructField = NewOneOfEach()
	err1110 := p.StructField.Read(iprot)
	if err1110 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.StructFieldOneOfEach", err1110)
	}
	return err
}

func (p *TestUnion) ReadFieldStructField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TestUnion) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1116, _size1113, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	p.StructList = thrift.NewTList(_etype1116, _size1113)
	for _i1117 := 0; _i1117 < _size1113; _i1117++ {
		_elem1118 := NewRandomStuff()
		err1121 := _elem1118.Read(iprot)
		if err1121 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1118RandomStuff", err1121)
		}
		p.StructList.Push(_elem1118)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TestUnion) ReadFieldStructList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TestUnion) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1122, err1123 := iprot.ReadI32()
	if err1123 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "other_i32_field", p.ThriftName(), err1123)
	}
	p.OtherI32Field = v1122
	return err
}

func (p *TestUnion) ReadFieldOtherI32Field(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *TestUnion) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1124, err1125 := iprot.ReadI32()
	if err1125 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "enum_field", p.ThriftName(), err1125)
	}
	p.EnumField = SomeEnum(v1124)
	return err
}

func (p *TestUnion) ReadFieldEnumField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *TestUnion) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1131, _size1128, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	p.I32Set = thrift.NewTSet(_etype1131, _size1128)
	for _i1132 := 0; _i1132 < _size1128; _i1132++ {
		v1134, err1135 := iprot.ReadI32()
		if err1135 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1133", "", err1135)
		}
		_elem1133 := v1134
		p.I32Set.Add(_elem1133)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *TestUnion) ReadFieldI32Set(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *TestUnion) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1139, _vtype1140, _size1138, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	p.I32Map = thrift.NewTMap(_ktype1139, _vtype1140, _size1138)
	for _i1142 := 0; _i1142 < _size1138; _i1142++ {
		v1145, err1146 := iprot.ReadI32()
		if err1146 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1143", "", err1146)
		}
		_key1143 := v1145
		v1147, err1148 := iprot.ReadI32()
		if err1148 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1144", "", err1148)
		}
		_val1144 := v1147
		p.I32Map.Set(_key1143, _val1144)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TestUnion) ReadFieldI32Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *TestUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TestUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("string_field", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StringField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) WriteFieldStringField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *TestUnion) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("i32_field", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.I32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) WriteFieldI32Field(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TestUnion) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructField != nil {
		err = oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
		err = p.StructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) WriteFieldStructField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TestUnion) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.StructList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1149 := range p.StructList.Iter() {
			Iter1150 := Iter1149.(*RandomStuff)
			err = Iter1150.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("RandomStuff", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) WriteFieldStructList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TestUnion) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("other_i32_field", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.OtherI32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnion) WriteFieldOtherI32Field(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *TestUnion) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEnumField() {
		err = oprot.WriteFieldBegin("enum_field", thrift.I32, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.EnumField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) WriteFieldEnumField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *TestUnion) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, p.I32Set.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter1151 := p.I32Set.Front(); Iter1151 != nil; Iter1151 = Iter1151.Next() {
			Iter1152 := Iter1151.Value.(int32)
			err = oprot.WriteI32(int32(Iter1152))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1152", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) WriteFieldI32Set(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *TestUnion) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, p.I32Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1153 := range p.I32Map.Iter() {
			Kiter1154, Viter1155 := Miter1153.Key().(int32), Miter1153.Value().(int32)
			err = oprot.WriteI32(int32(Kiter1154))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1154", "", err)
			}
			err = oprot.WriteI32(int32(Viter1155))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1155", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnion) WriteFieldI32Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *TestUnion) TStructName() string {
	return "TestUnion"
}

func (p *TestUnion) ThriftName() string {
	return "TestUnion"
}

func (p *TestUnion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestUnion(%+v)", *p)
}

func (p *TestUnion) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TestUnion)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TestUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StringField
	case 2:
		return p.I32Field
	case 3:
		return p.StructField
	case 4:
		return p.StructList
	case 5:
		return p.OtherI32Field
	case 6:
		return p.EnumField
	case 7:
		return p.I32Set
	case 8:
		return p.I32Map
	}
	return nil
}

func (p *TestUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("string_field", thrift.STRING, 1),
		thrift.NewTField("i32_field", thrift.I32, 2),
		thrift.NewTField("struct_field", thrift.STRUCT, 3),
		thrift.NewTField("struct_list", thrift.LIST, 4),
		thrift.NewTField("other_i32_field", thrift.I32, 5),
		thrift.NewTField("enum_field", thrift.I32, 6),
		thrift.NewTField("i32_set", thrift.SET, 7),
		thrift.NewTField("i32_map", thrift.MAP, 8),
	})
}

/**
 * Attributes:
 *  - I32Field
 *  - StructField
 *  - StructList
 *  - OtherI32Field
 *  - EnumField
 *  - I32Set
 *  - I32Map
 */
type TestUnionMinusStringField struct {
	_             interface{}  // nil # 1
	I32Field      int32        "i32_field"       // 2
	StructField   *OneOfEach   "struct_field"    // 3
	StructList    thrift.TList "struct_list"     // 4
	OtherI32Field int32        "other_i32_field" // 5
	EnumField     SomeEnum     "enum_field"      // 6
	I32Set        thrift.TSet  "i32_set"         // 7
	I32Map        thrift.TMap  "i32_map"         // 8
}

var tstructTestUnionMinusStringField = thrift.NewTStruct("TestUnionMinusStringField", []thrift.TField{
	thrift.NewTField("i32_field", thrift.I32, 2),
	thrift.NewTField("struct_field", thrift.STRUCT, 3),
	thrift.NewTField("struct_list", thrift.LIST, 4),
	thrift.NewTField("other_i32_field", thrift.I32, 5),
	thrift.NewTField("enum_field", thrift.I32, 6),
	thrift.NewTField("i32_set", thrift.SET, 7),
	thrift.NewTField("i32_map", thrift.MAP, 8),
})

func (*TestUnionMinusStringField) GetTStruct() thrift.TStruct { return tstructTestUnionMinusStringField }
func NewTestUnionMinusStringField() *TestUnionMinusStringField {
	output := &TestUnionMinusStringField{}
	{
		output.EnumField = math.MinInt32 - 1
	}
	return output
}

func (p *TestUnionMinusStringField) IsSetEnumField() bool {
	return int64(p.EnumField) != math.MinInt32-1
}

func (p *TestUnionMinusStringField) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructTestUnionMinusStringField.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructTestUnionMinusStringField.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructTestUnionMinusStringField.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 2 || fieldName == "i32_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "struct_field" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 4 || fieldName == "struct_list" {
			if fieldTypeId == thrift.LIST {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 5 || fieldName == "other_i32_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 6 || fieldName == "enum_field" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 7 || fieldName == "i32_set" {
			if fieldTypeId == thrift.SET {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField7(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 8 || fieldName == "i32_map" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField8(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1156, err1157 := iprot.ReadI32()
	if err1157 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "i32_field", p.ThriftName(), err1157)
	}
	p.I32Field = v1156
	return err
}

func (p *TestUnionMinusStringField) ReadFieldI32Field(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *TestUnionMinusStringField) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.StructField = NewOneOfEach()
	err1160 := p.StructField.Read(iprot)
	if err1160 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.StructFieldOneOfEach", err1160)
	}
	return err
}

func (p *TestUnionMinusStringField) ReadFieldStructField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *TestUnionMinusStringField) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1166, _size1163, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.StructList", "", err)
	}
	p.StructList = thrift.NewTList(_etype1166, _size1163)
	for _i1167 := 0; _i1167 < _size1163; _i1167++ {
		_elem1168 := NewRandomStuff()
		err1171 := _elem1168.Read(iprot)
		if err1171 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1168RandomStuff", err1171)
		}
		p.StructList.Push(_elem1168)
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *TestUnionMinusStringField) ReadFieldStructList(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField4(iprot)
}

func (p *TestUnionMinusStringField) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1172, err1173 := iprot.ReadI32()
	if err1173 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "other_i32_field", p.ThriftName(), err1173)
	}
	p.OtherI32Field = v1172
	return err
}

func (p *TestUnionMinusStringField) ReadFieldOtherI32Field(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField5(iprot)
}

func (p *TestUnionMinusStringField) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1174, err1175 := iprot.ReadI32()
	if err1175 != nil {
		return thrift.NewTProtocolExceptionReadField(6, "enum_field", p.ThriftName(), err1175)
	}
	p.EnumField = SomeEnum(v1174)
	return err
}

func (p *TestUnionMinusStringField) ReadFieldEnumField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField6(iprot)
}

func (p *TestUnionMinusStringField) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1181, _size1178, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Set", "", err)
	}
	p.I32Set = thrift.NewTSet(_etype1181, _size1178)
	for _i1182 := 0; _i1182 < _size1178; _i1182++ {
		v1184, err1185 := iprot.ReadI32()
		if err1185 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1183", "", err1185)
		}
		_elem1183 := v1184
		p.I32Set.Add(_elem1183)
	}
	err = iprot.ReadSetEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "set", err)
	}
	return err
}

func (p *TestUnionMinusStringField) ReadFieldI32Set(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField7(iprot)
}

func (p *TestUnionMinusStringField) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1189, _vtype1190, _size1188, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.I32Map", "", err)
	}
	p.I32Map = thrift.NewTMap(_ktype1189, _vtype1190, _size1188)
	for _i1192 := 0; _i1192 < _size1188; _i1192++ {
		v1195, err1196 := iprot.ReadI32()
		if err1196 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1193", "", err1196)
		}
		_key1193 := v1195
		v1197, err1198 := iprot.ReadI32()
		if err1198 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1194", "", err1198)
		}
		_val1194 := v1197
		p.I32Map.Set(_key1193, _val1194)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *TestUnionMinusStringField) ReadFieldI32Map(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField8(iprot)
}

func (p *TestUnionMinusStringField) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("TestUnionMinusStringField")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField4(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField5(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField6(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField7(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField8(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("i32_field", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.I32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldI32Field(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *TestUnionMinusStringField) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructField != nil {
		err = oprot.WriteFieldBegin("struct_field", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
		err = p.StructField.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("OneOfEach", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "struct_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldStructField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *TestUnionMinusStringField) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StructList != nil {
		err = oprot.WriteFieldBegin("struct_list", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, p.StructList.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for Iter1199 := range p.StructList.Iter() {
			Iter1200 := Iter1199.(*RandomStuff)
			err = Iter1200.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("RandomStuff", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "struct_list", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldStructList(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField4(oprot)
}

func (p *TestUnionMinusStringField) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("other_i32_field", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.OtherI32Field))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "other_i32_field", p.ThriftName(), err)
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldOtherI32Field(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField5(oprot)
}

func (p *TestUnionMinusStringField) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.IsSetEnumField() {
		err = oprot.WriteFieldBegin("enum_field", thrift.I32, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteI32(int32(p.EnumField))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "enum_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldEnumField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField6(oprot)
}

func (p *TestUnionMinusStringField) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Set != nil {
		err = oprot.WriteFieldBegin("i32_set", thrift.SET, 7)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
		err = oprot.WriteSetBegin(thrift.I32, p.I32Set.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		for Iter1201 := p.I32Set.Front(); Iter1201 != nil; Iter1201 = Iter1201.Next() {
			Iter1202 := Iter1201.Value.(int32)
			err = oprot.WriteI32(int32(Iter1202))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1202", "", err)
			}
		}
		err = oprot.WriteSetEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "set", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(7, "i32_set", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldI32Set(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField7(oprot)
}

func (p *TestUnionMinusStringField) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.I32Map != nil {
		err = oprot.WriteFieldBegin("i32_map", thrift.MAP, 8)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, p.I32Map.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1203 := range p.I32Map.Iter() {
			Kiter1204, Viter1205 := Miter1203.Key().(int32), Miter1203.Value().(int32)
			err = oprot.WriteI32(int32(Kiter1204))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1204", "", err)
			}
			err = oprot.WriteI32(int32(Viter1205))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1205", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(8, "i32_map", p.ThriftName(), err)
		}
	}
	return err
}

func (p *TestUnionMinusStringField) WriteFieldI32Map(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField8(oprot)
}

func (p *TestUnionMinusStringField) TStructName() string {
	return "TestUnionMinusStringField"
}

func (p *TestUnionMinusStringField) ThriftName() string {
	return "TestUnionMinusStringField"
}

func (p *TestUnionMinusStringField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestUnionMinusStringField(%+v)", *p)
}

func (p *TestUnionMinusStringField) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*TestUnionMinusStringField)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *TestUnionMinusStringField) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 2:
		return p.I32Field
	case 3:
		return p.StructField
	case 4:
		return p.StructList
	case 5:
		return p.OtherI32Field
	case 6:
		return p.EnumField
	case 7:
		return p.I32Set
	case 8:
		return p.I32Map
	}
	return nil
}

func (p *TestUnionMinusStringField) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("i32_field", thrift.I32, 2),
		thrift.NewTField("struct_field", thrift.STRUCT, 3),
		thrift.NewTField("struct_list", thrift.LIST, 4),
		thrift.NewTField("other_i32_field", thrift.I32, 5),
		thrift.NewTField("enum_field", thrift.I32, 6),
		thrift.NewTField("i32_set", thrift.SET, 7),
		thrift.NewTField("i32_map", thrift.MAP, 8),
	})
}

/**
 * Attributes:
 *  - StringField
 *  - BinaryField
 */
type ComparableUnion struct {
	StringField string "string_field" // 1
	BinaryField []byte "binary_field" // 2
}

var tstructComparableUnion = thrift.NewTStruct("ComparableUnion", []thrift.TField{
	thrift.NewTField("string_field", thrift.STRING, 1),
	thrift.NewTField("binary_field", thrift.BINARY, 2),
})

func (*ComparableUnion) GetTStruct() thrift.TStruct { return tstructComparableUnion }
func NewComparableUnion() *ComparableUnion {
	output := &ComparableUnion{}
	{
	}
	return output
}

func (p *ComparableUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructComparableUnion.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructComparableUnion.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructComparableUnion.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "string_field" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "binary_field" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1206, err1207 := iprot.ReadString()
	if err1207 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "string_field", p.ThriftName(), err1207)
	}
	p.StringField = v1206
	return err
}

func (p *ComparableUnion) ReadFieldStringField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *ComparableUnion) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1208, err1209 := iprot.ReadBinary()
	if err1209 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "binary_field", p.ThriftName(), err1209)
	}
	p.BinaryField = v1208
	return err
}

func (p *ComparableUnion) ReadFieldBinaryField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *ComparableUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("ComparableUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("string_field", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.StringField))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "string_field", p.ThriftName(), err)
	}
	return err
}

func (p *ComparableUnion) WriteFieldStringField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *ComparableUnion) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.BinaryField != nil {
		err = oprot.WriteFieldBegin("binary_field", thrift.BINARY, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.BinaryField)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "binary_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ComparableUnion) WriteFieldBinaryField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *ComparableUnion) TStructName() string {
	return "ComparableUnion"
}

func (p *ComparableUnion) ThriftName() string {
	return "ComparableUnion"
}

func (p *ComparableUnion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComparableUnion(%+v)", *p)
}

func (p *ComparableUnion) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*ComparableUnion)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *ComparableUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.StringField
	case 2:
		return p.BinaryField
	}
	return nil
}

func (p *ComparableUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("string_field", thrift.STRING, 1),
		thrift.NewTField("binary_field", thrift.BINARY, 2),
	})
}

/**
 * Attributes:
 *  - TestUnion
 */
type StructWithAUnion struct {
	TestUnion *TestUnion "test_union" // 1
}

var tstructStructWithAUnion = thrift.NewTStruct("StructWithAUnion", []thrift.TField{
	thrift.NewTField("test_union", thrift.STRUCT, 1),
})

func (*StructWithAUnion) GetTStruct() thrift.TStruct { return tstructStructWithAUnion }
func NewStructWithAUnion() *StructWithAUnion {
	output := &StructWithAUnion{}
	{
	}
	return output
}

func (p *StructWithAUnion) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithAUnion.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructStructWithAUnion.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructStructWithAUnion.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "test_union" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithAUnion) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.TestUnion = NewTestUnion()
	err1212 := p.TestUnion.Read(iprot)
	if err1212 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.TestUnionTestUnion", err1212)
	}
	return err
}

func (p *StructWithAUnion) ReadFieldTestUnion(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *StructWithAUnion) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithAUnion")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithAUnion) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TestUnion != nil {
		err = oprot.WriteFieldBegin("test_union", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "test_union", p.ThriftName(), err)
		}
		err = p.TestUnion.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TestUnion", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "test_union", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithAUnion) WriteFieldTestUnion(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *StructWithAUnion) TStructName() string {
	return "StructWithAUnion"
}

func (p *StructWithAUnion) ThriftName() string {
	return "StructWithAUnion"
}

func (p *StructWithAUnion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructWithAUnion(%+v)", *p)
}

func (p *StructWithAUnion) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*StructWithAUnion)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StructWithAUnion) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TestUnion
	}
	return nil
}

func (p *StructWithAUnion) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("test_union", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Blah
 *  - Blah2
 *  - Bw
 */
type PrimitiveThenStruct struct {
	Blah  int32      "blah"  // 1
	Blah2 int32      "blah2" // 2
	Bw    *Backwards "bw"    // 3
}

var tstructPrimitiveThenStruct = thrift.NewTStruct("PrimitiveThenStruct", []thrift.TField{
	thrift.NewTField("blah", thrift.I32, 1),
	thrift.NewTField("blah2", thrift.I32, 2),
	thrift.NewTField("bw", thrift.STRUCT, 3),
})

func (*PrimitiveThenStruct) GetTStruct() thrift.TStruct { return tstructPrimitiveThenStruct }
func NewPrimitiveThenStruct() *PrimitiveThenStruct {
	output := &PrimitiveThenStruct{}
	{
	}
	return output
}

func (p *PrimitiveThenStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrimitiveThenStruct.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructPrimitiveThenStruct.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructPrimitiveThenStruct.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "blah" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "blah2" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "bw" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1213, err1214 := iprot.ReadI32()
	if err1214 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "blah", p.ThriftName(), err1214)
	}
	p.Blah = v1213
	return err
}

func (p *PrimitiveThenStruct) ReadFieldBlah(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *PrimitiveThenStruct) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1215, err1216 := iprot.ReadI32()
	if err1216 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "blah2", p.ThriftName(), err1216)
	}
	p.Blah2 = v1215
	return err
}

func (p *PrimitiveThenStruct) ReadFieldBlah2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *PrimitiveThenStruct) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Bw = NewBackwards()
	err1219 := p.Bw.Read(iprot)
	if err1219 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.BwBackwards", err1219)
	}
	return err
}

func (p *PrimitiveThenStruct) ReadFieldBw(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *PrimitiveThenStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("PrimitiveThenStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Blah))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "blah", p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) WriteFieldBlah(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *PrimitiveThenStruct) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("blah2", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Blah2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "blah2", p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveThenStruct) WriteFieldBlah2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *PrimitiveThenStruct) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Bw != nil {
		err = oprot.WriteFieldBegin("bw", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bw", p.ThriftName(), err)
		}
		err = p.Bw.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("Backwards", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "bw", p.ThriftName(), err)
		}
	}
	return err
}

func (p *PrimitiveThenStruct) WriteFieldBw(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *PrimitiveThenStruct) TStructName() string {
	return "PrimitiveThenStruct"
}

func (p *PrimitiveThenStruct) ThriftName() string {
	return "PrimitiveThenStruct"
}

func (p *PrimitiveThenStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrimitiveThenStruct(%+v)", *p)
}

func (p *PrimitiveThenStruct) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*PrimitiveThenStruct)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *PrimitiveThenStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Blah
	case 2:
		return p.Blah2
	case 3:
		return p.Bw
	}
	return nil
}

func (p *PrimitiveThenStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("blah", thrift.I32, 1),
		thrift.NewTField("blah2", thrift.I32, 2),
		thrift.NewTField("bw", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - SomemapField
 */
type StructWithASomemap struct {
	SomemapField SomeMap "somemap_field" // 1
}

var tstructStructWithASomemap = thrift.NewTStruct("StructWithASomemap", []thrift.TField{
	thrift.NewTField("somemap_field", thrift.MAP, 1),
})

func (*StructWithASomemap) GetTStruct() thrift.TStruct { return tstructStructWithASomemap }
func NewStructWithASomemap() *StructWithASomemap {
	output := &StructWithASomemap{}
	{
	}
	return output
}

func (p *StructWithASomemap) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructWithASomemap.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructStructWithASomemap.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructStructWithASomemap.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "somemap_field" {
			if fieldTypeId == thrift.MAP {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithASomemap) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1223, _vtype1224, _size1222, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.SomemapField", "", err)
	}
	p.SomemapField = thrift.NewTMap(_ktype1223, _vtype1224, _size1222)
	for _i1226 := 0; _i1226 < _size1222; _i1226++ {
		v1229, err1230 := iprot.ReadI32()
		if err1230 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1227", "", err1230)
		}
		_key1227 := v1229
		v1231, err1232 := iprot.ReadI32()
		if err1232 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1228", "", err1232)
		}
		_val1228 := v1231
		p.SomemapField.Set(_key1227, _val1228)
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *StructWithASomemap) ReadFieldSomemapField(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *StructWithASomemap) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("StructWithASomemap")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructWithASomemap) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.SomemapField != nil {
		err = oprot.WriteFieldBegin("somemap_field", thrift.MAP, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "somemap_field", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.I32, thrift.I32, p.SomemapField.Len())
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Miter1233 := range p.SomemapField.Iter() {
			Kiter1234, Viter1235 := Miter1233.Key().(int32), Miter1233.Value().(int32)
			err = oprot.WriteI32(int32(Kiter1234))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1234", "", err)
			}
			err = oprot.WriteI32(int32(Viter1235))
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1235", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "somemap_field", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructWithASomemap) WriteFieldSomemapField(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *StructWithASomemap) TStructName() string {
	return "StructWithASomemap"
}

func (p *StructWithASomemap) ThriftName() string {
	return "StructWithASomemap"
}

func (p *StructWithASomemap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructWithASomemap(%+v)", *p)
}

func (p *StructWithASomemap) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*StructWithASomemap)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StructWithASomemap) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.SomemapField
	}
	return nil
}

func (p *StructWithASomemap) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("somemap_field", thrift.MAP, 1),
	})
}

/**
 * Attributes:
 *  - Field1
 *  - Field2
 */
type BigFieldIdStruct struct {
	Field1 string      "field1" // 1
	_      interface{} // nil # 2
	_      interface{} // nil # 3
	_      interface{} // nil # 4
	_      interface{} // nil # 5
	_      interface{} // nil # 6
	_      interface{} // nil # 7
	_      interface{} // nil # 8
	_      interface{} // nil # 9
	_      interface{} // nil # 10
	_      interface{} // nil # 11
	_      interface{} // nil # 12
	_      interface{} // nil # 13
	_      interface{} // nil # 14
	_      interface{} // nil # 15
	_      interface{} // nil # 16
	_      interface{} // nil # 17
	_      interface{} // nil # 18
	_      interface{} // nil # 19
	_      interface{} // nil # 20
	_      interface{} // nil # 21
	_      interface{} // nil # 22
	_      interface{} // nil # 23
	_      interface{} // nil # 24
	_      interface{} // nil # 25
	_      interface{} // nil # 26
	_      interface{} // nil # 27
	_      interface{} // nil # 28
	_      interface{} // nil # 29
	_      interface{} // nil # 30
	_      interface{} // nil # 31
	_      interface{} // nil # 32
	_      interface{} // nil # 33
	_      interface{} // nil # 34
	_      interface{} // nil # 35
	_      interface{} // nil # 36
	_      interface{} // nil # 37
	_      interface{} // nil # 38
	_      interface{} // nil # 39
	_      interface{} // nil # 40
	_      interface{} // nil # 41
	_      interface{} // nil # 42
	_      interface{} // nil # 43
	_      interface{} // nil # 44
	Field2 string      "field2" // 45
}

var tstructBigFieldIdStruct = thrift.NewTStruct("BigFieldIdStruct", []thrift.TField{
	thrift.NewTField("field1", thrift.STRING, 1),
	thrift.NewTField("field2", thrift.STRING, 45),
})

func (*BigFieldIdStruct) GetTStruct() thrift.TStruct { return tstructBigFieldIdStruct }
func NewBigFieldIdStruct() *BigFieldIdStruct {
	output := &BigFieldIdStruct{}
	{
	}
	return output
}

func (p *BigFieldIdStruct) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBigFieldIdStruct.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBigFieldIdStruct.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBigFieldIdStruct.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "field1" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 45 || fieldName == "field2" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField45(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField45(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1236, err1237 := iprot.ReadString()
	if err1237 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "field1", p.ThriftName(), err1237)
	}
	p.Field1 = v1236
	return err
}

func (p *BigFieldIdStruct) ReadFieldField1(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BigFieldIdStruct) ReadField45(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1238, err1239 := iprot.ReadString()
	if err1239 != nil {
		return thrift.NewTProtocolExceptionReadField(45, "field2", p.ThriftName(), err1239)
	}
	p.Field2 = v1238
	return err
}

func (p *BigFieldIdStruct) ReadFieldField2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField45(iprot)
}

func (p *BigFieldIdStruct) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BigFieldIdStruct")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField45(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field1", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Field1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) WriteFieldField1(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BigFieldIdStruct) WriteField45(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field2", thrift.STRING, 45)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Field2))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(45, "field2", p.ThriftName(), err)
	}
	return err
}

func (p *BigFieldIdStruct) WriteFieldField2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField45(oprot)
}

func (p *BigFieldIdStruct) TStructName() string {
	return "BigFieldIdStruct"
}

func (p *BigFieldIdStruct) ThriftName() string {
	return "BigFieldIdStruct"
}

func (p *BigFieldIdStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BigFieldIdStruct(%+v)", *p)
}

func (p *BigFieldIdStruct) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BigFieldIdStruct)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *BigFieldIdStruct) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Field1
	case 45:
		return p.Field2
	}
	return nil
}

func (p *BigFieldIdStruct) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("field1", thrift.STRING, 1),
		thrift.NewTField("field2", thrift.STRING, 45),
	})
}

/**
 * Attributes:
 *  - Field1
 *  - Field2
 *  - Field3
 */
type BreaksRubyCompactProtocol struct {
	Field1 string            "field1" // 1
	Field2 *BigFieldIdStruct "field2" // 2
	Field3 int32             "field3" // 3
}

var tstructBreaksRubyCompactProtocol = thrift.NewTStruct("BreaksRubyCompactProtocol", []thrift.TField{
	thrift.NewTField("field1", thrift.STRING, 1),
	thrift.NewTField("field2", thrift.STRUCT, 2),
	thrift.NewTField("field3", thrift.I32, 3),
})

func (*BreaksRubyCompactProtocol) GetTStruct() thrift.TStruct { return tstructBreaksRubyCompactProtocol }
func NewBreaksRubyCompactProtocol() *BreaksRubyCompactProtocol {
	output := &BreaksRubyCompactProtocol{}
	{
	}
	return output
}

func (p *BreaksRubyCompactProtocol) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructBreaksRubyCompactProtocol.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructBreaksRubyCompactProtocol.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructBreaksRubyCompactProtocol.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "field1" {
			if fieldTypeId == thrift.STRING {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 2 || fieldName == "field2" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else if fieldId == 3 || fieldName == "field3" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1240, err1241 := iprot.ReadString()
	if err1241 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "field1", p.ThriftName(), err1241)
	}
	p.Field1 = v1240
	return err
}

func (p *BreaksRubyCompactProtocol) ReadFieldField1(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *BreaksRubyCompactProtocol) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Field2 = NewBigFieldIdStruct()
	err1244 := p.Field2.Read(iprot)
	if err1244 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.Field2BigFieldIdStruct", err1244)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) ReadFieldField2(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField2(iprot)
}

func (p *BreaksRubyCompactProtocol) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1245, err1246 := iprot.ReadI32()
	if err1246 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "field3", p.ThriftName(), err1246)
	}
	p.Field3 = v1245
	return err
}

func (p *BreaksRubyCompactProtocol) ReadFieldField3(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField3(iprot)
}

func (p *BreaksRubyCompactProtocol) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("BreaksRubyCompactProtocol")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField2(oprot)
	if err != nil {
		return err
	}
	err = p.WriteField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field1", thrift.STRING, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteString(string(p.Field1))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "field1", p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) WriteFieldField1(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *BreaksRubyCompactProtocol) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Field2 != nil {
		err = oprot.WriteFieldBegin("field2", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "field2", p.ThriftName(), err)
		}
		err = p.Field2.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("BigFieldIdStruct", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "field2", p.ThriftName(), err)
		}
	}
	return err
}

func (p *BreaksRubyCompactProtocol) WriteFieldField2(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField2(oprot)
}

func (p *BreaksRubyCompactProtocol) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("field3", thrift.I32, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Field3))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "field3", p.ThriftName(), err)
	}
	return err
}

func (p *BreaksRubyCompactProtocol) WriteFieldField3(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField3(oprot)
}

func (p *BreaksRubyCompactProtocol) TStructName() string {
	return "BreaksRubyCompactProtocol"
}

func (p *BreaksRubyCompactProtocol) ThriftName() string {
	return "BreaksRubyCompactProtocol"
}

func (p *BreaksRubyCompactProtocol) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BreaksRubyCompactProtocol(%+v)", *p)
}

func (p *BreaksRubyCompactProtocol) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*BreaksRubyCompactProtocol)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *BreaksRubyCompactProtocol) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Field1
	case 2:
		return p.Field2
	case 3:
		return p.Field3
	}
	return nil
}

func (p *BreaksRubyCompactProtocol) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("field1", thrift.STRING, 1),
		thrift.NewTField("field2", thrift.STRUCT, 2),
		thrift.NewTField("field3", thrift.I32, 3),
	})
}

var CompactProtoTestStruct_COMPACTTEST *CompactProtoTestStruct

const I32_MYCONST = 2
const SomeEnum_MYSOMEENUM = 1
const SomeEnum_MYSOMEENUM_1 = 1

var _MYENUMMAP thrift.TMap
var _EXTRACRAZYMAP thrift.TMap

func init() {
	CompactProtoTestStruct_COMPACTTEST = NewCompactProtoTestStruct()
	{
		CompactProtoTestStruct_COMPACTTEST.AByte = 127
		CompactProtoTestStruct_COMPACTTEST.AI16 = 32000
		CompactProtoTestStruct_COMPACTTEST.AI32 = 1000000000
		CompactProtoTestStruct_COMPACTTEST.AI64 = 1099511627775
		CompactProtoTestStruct_COMPACTTEST.ADouble = 5.6789
		CompactProtoTestStruct_COMPACTTEST.AString = "my string"
		CompactProtoTestStruct_COMPACTTEST.TrueField = true
		CompactProtoTestStruct_COMPACTTEST.FalseField = false
		v1248 := NewEmpty()
		{
		}
		CompactProtoTestStruct_COMPACTTEST.EmptyStructField = v1248
		v1250 := thrift.NewTList(thrift.BYTE, 5)
		{
			var v1251 int8 = -127
			v1250.Push(v1251)
			var v1252 int8 = -1
			v1250.Push(v1252)
			var v1253 int8 = 0
			v1250.Push(v1253)
			var v1254 int8 = 1
			v1250.Push(v1254)
			var v1255 int8 = 127
			v1250.Push(v1255)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteList = v1250
		v1257 := thrift.NewTList(thrift.I16, 4)
		{
			var v1258 int16 = -1
			v1257.Push(v1258)
			var v1259 int16 = 0
			v1257.Push(v1259)
			var v1260 int16 = 1
			v1257.Push(v1260)
			var v1261 int16 = 32767
			v1257.Push(v1261)
		}

		CompactProtoTestStruct_COMPACTTEST.I16List = v1257
		v1263 := thrift.NewTList(thrift.I32, 6)
		{
			var v1264 int32 = -1
			v1263.Push(v1264)
			var v1265 int32 = 0
			v1263.Push(v1265)
			var v1266 int32 = 255
			v1263.Push(v1266)
			var v1267 int32 = 65535
			v1263.Push(v1267)
			var v1268 int32 = 16777215
			v1263.Push(v1268)
			var v1269 int32 = 2147483647
			v1263.Push(v1269)
		}

		CompactProtoTestStruct_COMPACTTEST.I32List = v1263
		v1271 := thrift.NewTList(thrift.I64, 10)
		{
			var v1272 int64 = -1
			v1271.Push(v1272)
			var v1273 int64 = 0
			v1271.Push(v1273)
			var v1274 int64 = 255
			v1271.Push(v1274)
			var v1275 int64 = 65535
			v1271.Push(v1275)
			var v1276 int64 = 16777215
			v1271.Push(v1276)
			var v1277 int64 = 4294967295
			v1271.Push(v1277)
			var v1278 int64 = 1099511627775
			v1271.Push(v1278)
			var v1279 int64 = 281474976710655
			v1271.Push(v1279)
			var v1280 int64 = 72057594037927935
			v1271.Push(v1280)
			var v1281 int64 = 9223372036854775807
			v1271.Push(v1281)
		}

		CompactProtoTestStruct_COMPACTTEST.I64List = v1271
		v1283 := thrift.NewTList(thrift.DOUBLE, 3)
		{
			var v1284 float64 = 0.1
			v1283.Push(v1284)
			var v1285 float64 = 0.2
			v1283.Push(v1285)
			var v1286 float64 = 0.3
			v1283.Push(v1286)
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleList = v1283
		v1288 := thrift.NewTList(thrift.STRING, 3)
		{
			var v1289 string = "first"
			v1288.Push(v1289)
			var v1290 string = "second"
			v1288.Push(v1290)
			var v1291 string = "third"
			v1288.Push(v1291)
		}

		CompactProtoTestStruct_COMPACTTEST.StringList = v1288
		v1293 := thrift.NewTList(thrift.BOOL, 6)
		{
			var v1294 bool = true
			v1293.Push(v1294)
			var v1295 bool = true
			v1293.Push(v1295)
			var v1296 bool = true
			v1293.Push(v1296)
			var v1297 bool = false
			v1293.Push(v1297)
			var v1298 bool = false
			v1293.Push(v1298)
			var v1299 bool = false
			v1293.Push(v1299)
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanList = v1293
		v1301 := thrift.NewTList(thrift.STRUCT, 2)
		{
			var v1302 *Empty = NewEmpty()
			{
			}
			v1301.Push(v1302)
			var v1303 *Empty = NewEmpty()
			{
			}
			v1301.Push(v1303)
		}

		CompactProtoTestStruct_COMPACTTEST.StructList = v1301
		v1305 := thrift.NewTSet(thrift.BYTE, 5)
		{
			var v1306 int8 = -127
			v1305.Add(v1306)
			var v1307 int8 = -1
			v1305.Add(v1307)
			var v1308 int8 = 0
			v1305.Add(v1308)
			var v1309 int8 = 1
			v1305.Add(v1309)
			var v1310 int8 = 127
			v1305.Add(v1310)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteSet = v1305
		v1312 := thrift.NewTSet(thrift.I16, 4)
		{
			var v1313 int16 = -1
			v1312.Add(v1313)
			var v1314 int16 = 0
			v1312.Add(v1314)
			var v1315 int16 = 1
			v1312.Add(v1315)
			var v1316 int16 = 32767
			v1312.Add(v1316)
		}

		CompactProtoTestStruct_COMPACTTEST.I16Set = v1312
		v1318 := thrift.NewTSet(thrift.I32, 3)
		{
			var v1319 int32 = 1
			v1318.Add(v1319)
			var v1320 int32 = 2
			v1318.Add(v1320)
			var v1321 int32 = 3
			v1318.Add(v1321)
		}

		CompactProtoTestStruct_COMPACTTEST.I32Set = v1318
		v1323 := thrift.NewTSet(thrift.I64, 10)
		{
			var v1324 int64 = -1
			v1323.Add(v1324)
			var v1325 int64 = 0
			v1323.Add(v1325)
			var v1326 int64 = 255
			v1323.Add(v1326)
			var v1327 int64 = 65535
			v1323.Add(v1327)
			var v1328 int64 = 16777215
			v1323.Add(v1328)
			var v1329 int64 = 4294967295
			v1323.Add(v1329)
			var v1330 int64 = 1099511627775
			v1323.Add(v1330)
			var v1331 int64 = 281474976710655
			v1323.Add(v1331)
			var v1332 int64 = 72057594037927935
			v1323.Add(v1332)
			var v1333 int64 = 9223372036854775807
			v1323.Add(v1333)
		}

		CompactProtoTestStruct_COMPACTTEST.I64Set = v1323
		v1335 := thrift.NewTSet(thrift.DOUBLE, 3)
		{
			var v1336 float64 = 0.1
			v1335.Add(v1336)
			var v1337 float64 = 0.2
			v1335.Add(v1337)
			var v1338 float64 = 0.3
			v1335.Add(v1338)
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleSet = v1335
		v1340 := thrift.NewTSet(thrift.STRING, 3)
		{
			var v1341 string = "first"
			v1340.Add(v1341)
			var v1342 string = "second"
			v1340.Add(v1342)
			var v1343 string = "third"
			v1340.Add(v1343)
		}

		CompactProtoTestStruct_COMPACTTEST.StringSet = v1340
		v1345 := thrift.NewTSet(thrift.BOOL, 2)
		{
			var v1346 bool = true
			v1345.Add(v1346)
			var v1347 bool = false
			v1345.Add(v1347)
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanSet = v1345
		v1349 := thrift.NewTSet(thrift.STRUCT, 1)
		{
			var v1350 *Empty = NewEmpty()
			{
			}
			v1349.Add(v1350)
		}

		CompactProtoTestStruct_COMPACTTEST.StructSet = v1349
		v1352 := thrift.NewTMap(thrift.BYTE, thrift.BYTE, 1)
		{
			var k1353 int8 = 1
			var v1354 int8 = 2
			v1352.Set(k1353, v1354)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteByteMap = v1352
		v1356 := thrift.NewTMap(thrift.I16, thrift.BYTE, 3)
		{
			var k1357 int16 = 1
			var v1358 int8 = 1
			v1356.Set(k1357, v1358)
			var k1359 int16 = -1
			var v1360 int8 = 1
			v1356.Set(k1359, v1360)
			var k1361 int16 = 32767
			var v1362 int8 = 1
			v1356.Set(k1361, v1362)
		}

		CompactProtoTestStruct_COMPACTTEST.I16ByteMap = v1356
		v1364 := thrift.NewTMap(thrift.I32, thrift.BYTE, 3)
		{
			var k1365 int32 = 1
			var v1366 int8 = 1
			v1364.Set(k1365, v1366)
			var k1367 int32 = -1
			var v1368 int8 = 1
			v1364.Set(k1367, v1368)
			var k1369 int32 = 2147483647
			var v1370 int8 = 1
			v1364.Set(k1369, v1370)
		}

		CompactProtoTestStruct_COMPACTTEST.I32ByteMap = v1364
		v1372 := thrift.NewTMap(thrift.I64, thrift.BYTE, 4)
		{
			var k1373 int64 = 0
			var v1374 int8 = 1
			v1372.Set(k1373, v1374)
			var k1375 int64 = 1
			var v1376 int8 = 1
			v1372.Set(k1375, v1376)
			var k1377 int64 = -1
			var v1378 int8 = 1
			v1372.Set(k1377, v1378)
			var k1379 int64 = 9223372036854775807
			var v1380 int8 = 1
			v1372.Set(k1379, v1380)
		}

		CompactProtoTestStruct_COMPACTTEST.I64ByteMap = v1372
		v1382 := thrift.NewTMap(thrift.DOUBLE, thrift.BYTE, 2)
		{
			var k1383 float64 = -1.1
			var v1384 int8 = 1
			v1382.Set(k1383, v1384)
			var k1385 float64 = 1.1
			var v1386 int8 = 1
			v1382.Set(k1385, v1386)
		}

		CompactProtoTestStruct_COMPACTTEST.DoubleByteMap = v1382
		v1388 := thrift.NewTMap(thrift.STRING, thrift.BYTE, 4)
		{
			var k1389 string = "first"
			var v1390 int8 = 1
			v1388.Set(k1389, v1390)
			var k1391 string = "second"
			var v1392 int8 = 2
			v1388.Set(k1391, v1392)
			var k1393 string = "third"
			var v1394 int8 = 3
			v1388.Set(k1393, v1394)
			var k1395 string = ""
			var v1396 int8 = 0
			v1388.Set(k1395, v1396)
		}

		CompactProtoTestStruct_COMPACTTEST.StringByteMap = v1388
		v1398 := thrift.NewTMap(thrift.BOOL, thrift.BYTE, 2)
		{
			var k1399 bool = true
			var v1400 int8 = 1
			v1398.Set(k1399, v1400)
			var k1401 bool = false
			var v1402 int8 = 0
			v1398.Set(k1401, v1402)
		}

		CompactProtoTestStruct_COMPACTTEST.BooleanByteMap = v1398
		v1404 := thrift.NewTMap(thrift.BYTE, thrift.I16, 3)
		{
			var k1405 int8 = 1
			var v1406 int16 = 1
			v1404.Set(k1405, v1406)
			var k1407 int8 = 2
			var v1408 int16 = -1
			v1404.Set(k1407, v1408)
			var k1409 int8 = 3
			var v1410 int16 = 32767
			v1404.Set(k1409, v1410)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI16Map = v1404
		v1412 := thrift.NewTMap(thrift.BYTE, thrift.I32, 3)
		{
			var k1413 int8 = 1
			var v1414 int32 = 1
			v1412.Set(k1413, v1414)
			var k1415 int8 = 2
			var v1416 int32 = -1
			v1412.Set(k1415, v1416)
			var k1417 int8 = 3
			var v1418 int32 = 2147483647
			v1412.Set(k1417, v1418)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI32Map = v1412
		v1420 := thrift.NewTMap(thrift.BYTE, thrift.I64, 3)
		{
			var k1421 int8 = 1
			var v1422 int64 = 1
			v1420.Set(k1421, v1422)
			var k1423 int8 = 2
			var v1424 int64 = -1
			v1420.Set(k1423, v1424)
			var k1425 int8 = 3
			var v1426 int64 = 9223372036854775807
			v1420.Set(k1425, v1426)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteI64Map = v1420
		v1428 := thrift.NewTMap(thrift.BYTE, thrift.DOUBLE, 3)
		{
			var k1429 int8 = 1
			var v1430 float64 = 0.1
			v1428.Set(k1429, v1430)
			var k1431 int8 = 2
			var v1432 float64 = -0.1
			v1428.Set(k1431, v1432)
			var k1433 int8 = 3
			var v1434 float64 = 1e+06
			v1428.Set(k1433, v1434)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteDoubleMap = v1428
		v1436 := thrift.NewTMap(thrift.BYTE, thrift.STRING, 3)
		{
			var k1437 int8 = 1
			var v1438 string = ""
			v1436.Set(k1437, v1438)
			var k1439 int8 = 2
			var v1440 string = "blah"
			v1436.Set(k1439, v1440)
			var k1441 int8 = 3
			var v1442 string = "loooooooooooooong string"
			v1436.Set(k1441, v1442)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteStringMap = v1436
		v1444 := thrift.NewTMap(thrift.BYTE, thrift.BOOL, 2)
		{
			var k1445 int8 = 1
			var v1446 bool = true
			v1444.Set(k1445, v1446)
			var k1447 int8 = 2
			var v1448 bool = false
			v1444.Set(k1447, v1448)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteBooleanMap = v1444
		v1450 := thrift.NewTMap(thrift.LIST, thrift.BYTE, 3)
		{
			var k1451 thrift.TList = thrift.NewTList(thrift.BYTE, 3)
			{
				var v1453 int8 = 1
				k1451.Push(v1453)
				var v1454 int8 = 2
				k1451.Push(v1454)
				var v1455 int8 = 3
				k1451.Push(v1455)
			}

			var v1452 int8 = 1
			v1450.Set(k1451, v1452)
			var k1456 thrift.TList = thrift.NewTList(thrift.BYTE, 2)
			{
				var v1458 int8 = 0
				k1456.Push(v1458)
				var v1459 int8 = 1
				k1456.Push(v1459)
			}

			var v1457 int8 = 2
			v1450.Set(k1456, v1457)
			var k1460 thrift.TList = thrift.NewTList(thrift.BYTE, 0)
			{
			}

			var v1461 int8 = 0
			v1450.Set(k1460, v1461)
		}

		CompactProtoTestStruct_COMPACTTEST.ListByteMap = v1450
		v1463 := thrift.NewTMap(thrift.SET, thrift.BYTE, 3)
		{
			var k1464 thrift.TSet = thrift.NewTSet(thrift.BYTE, 3)
			{
				var v1466 int8 = 1
				k1464.Add(v1466)
				var v1467 int8 = 2
				k1464.Add(v1467)
				var v1468 int8 = 3
				k1464.Add(v1468)
			}

			var v1465 int8 = 1
			v1463.Set(k1464, v1465)
			var k1469 thrift.TSet = thrift.NewTSet(thrift.BYTE, 2)
			{
				var v1471 int8 = 0
				k1469.Add(v1471)
				var v1472 int8 = 1
				k1469.Add(v1472)
			}

			var v1470 int8 = 2
			v1463.Set(k1469, v1470)
			var k1473 thrift.TSet = thrift.NewTSet(thrift.BYTE, 0)
			{
			}

			var v1474 int8 = 0
			v1463.Set(k1473, v1474)
		}

		CompactProtoTestStruct_COMPACTTEST.SetByteMap = v1463
		v1476 := thrift.NewTMap(thrift.MAP, thrift.BYTE, 3)
		{
			var k1477 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 1)
			{
				var k1479 int8 = 1
				var v1480 int8 = 1
				k1477.Set(k1479, v1480)
			}

			var v1478 int8 = 1
			v1476.Set(k1477, v1478)
			var k1481 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 1)
			{
				var k1483 int8 = 2
				var v1484 int8 = 2
				k1481.Set(k1483, v1484)
			}

			var v1482 int8 = 2
			v1476.Set(k1481, v1482)
			var k1485 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 0)
			{
			}

			var v1486 int8 = 0
			v1476.Set(k1485, v1486)
		}

		CompactProtoTestStruct_COMPACTTEST.MapByteMap = v1476
		v1488 := thrift.NewTMap(thrift.BYTE, thrift.MAP, 3)
		{
			var k1489 int8 = 0
			var v1490 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 0)
			{
			}

			v1488.Set(k1489, v1490)
			var k1491 int8 = 1
			var v1492 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 1)
			{
				var k1493 int8 = 1
				var v1494 int8 = 1
				v1492.Set(k1493, v1494)
			}

			v1488.Set(k1491, v1492)
			var k1495 int8 = 2
			var v1496 thrift.TMap = thrift.NewTMap(thrift.BYTE, thrift.BYTE, 2)
			{
				var k1497 int8 = 1
				var v1498 int8 = 1
				v1496.Set(k1497, v1498)
				var k1499 int8 = 2
				var v1500 int8 = 2
				v1496.Set(k1499, v1500)
			}

			v1488.Set(k1495, v1496)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteMapMap = v1488
		v1502 := thrift.NewTMap(thrift.BYTE, thrift.SET, 3)
		{
			var k1503 int8 = 0
			var v1504 thrift.TSet = thrift.NewTSet(thrift.BYTE, 0)
			{
			}

			v1502.Set(k1503, v1504)
			var k1505 int8 = 1
			var v1506 thrift.TSet = thrift.NewTSet(thrift.BYTE, 1)
			{
				var v1507 int8 = 1
				v1506.Add(v1507)
			}

			v1502.Set(k1505, v1506)
			var k1508 int8 = 2
			var v1509 thrift.TSet = thrift.NewTSet(thrift.BYTE, 2)
			{
				var v1510 int8 = 1
				v1509.Add(v1510)
				var v1511 int8 = 2
				v1509.Add(v1511)
			}

			v1502.Set(k1508, v1509)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteSetMap = v1502
		v1513 := thrift.NewTMap(thrift.BYTE, thrift.LIST, 3)
		{
			var k1514 int8 = 0
			var v1515 thrift.TList = thrift.NewTList(thrift.BYTE, 0)
			{
			}

			v1513.Set(k1514, v1515)
			var k1516 int8 = 1
			var v1517 thrift.TList = thrift.NewTList(thrift.BYTE, 1)
			{
				var v1518 int8 = 1
				v1517.Push(v1518)
			}

			v1513.Set(k1516, v1517)
			var k1519 int8 = 2
			var v1520 thrift.TList = thrift.NewTList(thrift.BYTE, 2)
			{
				var v1521 int8 = 1
				v1520.Push(v1521)
				var v1522 int8 = 2
				v1520.Push(v1522)
			}

			v1513.Set(k1519, v1520)
		}

		CompactProtoTestStruct_COMPACTTEST.ByteListMap = v1513
	}
	_MYENUMMAP = thrift.NewTMap(thrift.I32, thrift.I32, 1)
	{
		var k1523 SomeEnum = 1
		var v1524 SomeEnum = 2
		_MYENUMMAP.Set(k1523, v1524)
	}

	_EXTRACRAZYMAP = thrift.NewTMap(thrift.I32, thrift.STRUCT, 1)
	{
		var k1525 SomeEnum = 1
		var v1526 *StructWithSomeEnum = NewStructWithSomeEnum()
		{
			v1526.Blah = 2
		}
		_EXTRACRAZYMAP.Set(k1525, v1526)
	}

}
