/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package librarytest

import (
	"fmt"
	"math"
	"thrift"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type ISrv interface {
	/**
	 * Parameters:
	 *  - Arg
	 */
	Janky(arg int32) (retval1539 int32, err error)
	VoidMethod() (err error)
	PrimitiveMethod() (retval1541 int32, err error)
	StructMethod() (retval1542 *CompactProtoTestStruct, err error)
	/**
	 * Parameters:
	 *  - Something
	 */
	MethodWithDefaultArgs(something int32) (err error)
	OnewayMethod() (err error)
}

type SrvClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSrvClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SrvClient {
	return &SrvClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSrvClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SrvClient {
	return &SrvClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Parameters:
 *  - Arg
 */
func (p *SrvClient) Janky(arg int32) (retval1545 int32, err error) {
	err = p.SendJanky(arg)
	if err != nil {
		return
	}
	return p.RecvJanky()
}

func (p *SrvClient) SendJanky(arg int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("Janky", thrift.CALL, p.SeqId)
	args1546 := NewJankyArgs()
	args1546.Arg = arg
	err = args1546.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvJanky() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1548 := thrift.NewTApplicationExceptionDefault()
		var error1549 error
		error1549, err = error1548.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1549
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1547 := NewJankyResult()
	err = result1547.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1547.Success
	return
}

func (p *SrvClient) VoidMethod() (err error) {
	err = p.SendVoidMethod()
	if err != nil {
		return
	}
	return p.RecvVoidMethod()
}

func (p *SrvClient) SendVoidMethod() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("voidMethod", thrift.CALL, p.SeqId)
	args1551 := NewVoidMethodArgs()
	err = args1551.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvVoidMethod() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1553 := thrift.NewTApplicationExceptionDefault()
		var error1554 error
		error1554, err = error1553.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1554
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1552 := NewVoidMethodResult()
	err = result1552.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

func (p *SrvClient) PrimitiveMethod() (retval1555 int32, err error) {
	err = p.SendPrimitiveMethod()
	if err != nil {
		return
	}
	return p.RecvPrimitiveMethod()
}

func (p *SrvClient) SendPrimitiveMethod() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("primitiveMethod", thrift.CALL, p.SeqId)
	args1556 := NewPrimitiveMethodArgs()
	err = args1556.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvPrimitiveMethod() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1558 := thrift.NewTApplicationExceptionDefault()
		var error1559 error
		error1559, err = error1558.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1559
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1557 := NewPrimitiveMethodResult()
	err = result1557.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1557.Success
	return
}

func (p *SrvClient) StructMethod() (retval1560 *CompactProtoTestStruct, err error) {
	err = p.SendStructMethod()
	if err != nil {
		return
	}
	return p.RecvStructMethod()
}

func (p *SrvClient) SendStructMethod() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("structMethod", thrift.CALL, p.SeqId)
	args1561 := NewStructMethodArgs()
	err = args1561.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvStructMethod() (value *CompactProtoTestStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1563 := thrift.NewTApplicationExceptionDefault()
		var error1564 error
		error1564, err = error1563.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1564
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1562 := NewStructMethodResult()
	err = result1562.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1562.Success
	return
}

/**
 * Parameters:
 *  - Something
 */
func (p *SrvClient) MethodWithDefaultArgs(something int32) (err error) {
	err = p.SendMethodWithDefaultArgs(something)
	if err != nil {
		return
	}
	return p.RecvMethodWithDefaultArgs()
}

func (p *SrvClient) SendMethodWithDefaultArgs(something int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("methodWithDefaultArgs", thrift.CALL, p.SeqId)
	args1566 := NewMethodWithDefaultArgsArgs()
	args1566.Something = something
	err = args1566.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvMethodWithDefaultArgs() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1568 := thrift.NewTApplicationExceptionDefault()
		var error1569 error
		error1569, err = error1568.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1569
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1567 := NewMethodWithDefaultArgsResult()
	err = result1567.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

func (p *SrvClient) OnewayMethod() (err error) {
	err = p.SendOnewayMethod()
	if err != nil {
		return
	}
	return
}

func (p *SrvClient) SendOnewayMethod() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("onewayMethod", thrift.CALL, p.SeqId)
	args1571 := NewOnewayMethodArgs()
	err = args1571.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *SrvClient) RecvOnewayMethod() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1573 := thrift.NewTApplicationExceptionDefault()
		var error1574 error
		error1574, err = error1573.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1574
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1572 := NewOnewayMethodResult()
	err = result1572.Read(iprot)
	iprot.ReadMessageEnd()
	return
}

type SrvProcessor struct {
	handler      ISrv
	processorMap map[string]thrift.TProcessorFunction
}

func (p *SrvProcessor) Handler() ISrv {
	return p.handler
}

func (p *SrvProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SrvProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *SrvProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSrvProcessor(handler ISrv) *SrvProcessor {

	self1575 := &SrvProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self1575.processorMap["Janky"] = &srvProcessorJanky{handler: handler}
	self1575.processorMap["voidMethod"] = &srvProcessorVoidMethod{handler: handler}
	self1575.processorMap["primitiveMethod"] = &srvProcessorPrimitiveMethod{handler: handler}
	self1575.processorMap["structMethod"] = &srvProcessorStructMethod{handler: handler}
	self1575.processorMap["methodWithDefaultArgs"] = &srvProcessorMethodWithDefaultArgs{handler: handler}
	self1575.processorMap["onewayMethod"] = &srvProcessorOnewayMethod{handler: handler}
	return self1575
}

func (p *SrvProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x1576 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x1576.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x1576
	}
	return process.Process(seqId, iprot, oprot)
}

type srvProcessorJanky struct {
	handler ISrv
}

func (p *srvProcessorJanky) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewJankyArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Janky", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewJankyResult()
	if result.Success, err = p.handler.Janky(args.Arg); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Janky: "+err.Error())
		oprot.WriteMessageBegin("Janky", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("Janky", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type srvProcessorVoidMethod struct {
	handler ISrv
}

func (p *srvProcessorVoidMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewVoidMethodArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("voidMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewVoidMethodResult()
	if err = p.handler.VoidMethod(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing voidMethod: "+err.Error())
		oprot.WriteMessageBegin("voidMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("voidMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type srvProcessorPrimitiveMethod struct {
	handler ISrv
}

func (p *srvProcessorPrimitiveMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewPrimitiveMethodArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("primitiveMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewPrimitiveMethodResult()
	if result.Success, err = p.handler.PrimitiveMethod(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing primitiveMethod: "+err.Error())
		oprot.WriteMessageBegin("primitiveMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("primitiveMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type srvProcessorStructMethod struct {
	handler ISrv
}

func (p *srvProcessorStructMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewStructMethodArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("structMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewStructMethodResult()
	if result.Success, err = p.handler.StructMethod(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing structMethod: "+err.Error())
		oprot.WriteMessageBegin("structMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("structMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type srvProcessorMethodWithDefaultArgs struct {
	handler ISrv
}

func (p *srvProcessorMethodWithDefaultArgs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMethodWithDefaultArgsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("methodWithDefaultArgs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMethodWithDefaultArgsResult()
	if err = p.handler.MethodWithDefaultArgs(args.Something); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing methodWithDefaultArgs: "+err.Error())
		oprot.WriteMessageBegin("methodWithDefaultArgs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("methodWithDefaultArgs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type srvProcessorOnewayMethod struct {
	handler ISrv
}

func (p *srvProcessorOnewayMethod) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewOnewayMethodArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("onewayMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewOnewayMethodResult()
	if err = p.handler.OnewayMethod(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onewayMethod: "+err.Error())
		oprot.WriteMessageBegin("onewayMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("onewayMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - Arg
 */
type JankyArgs struct {
	Arg int32 "arg" // 1
}

var tstructJankyArgs = thrift.NewTStruct("Janky_args", []thrift.TField{
	thrift.NewTField("arg", thrift.I32, 1),
})

func (*JankyArgs) GetTStruct() thrift.TStruct { return tstructJankyArgs }
func NewJankyArgs() *JankyArgs {
	output := &JankyArgs{}
	{
	}
	return output
}

func (p *JankyArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructJankyArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructJankyArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructJankyArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "arg" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *JankyArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1577, err1578 := iprot.ReadI32()
	if err1578 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "arg", p.ThriftName(), err1578)
	}
	p.Arg = v1577
	return err
}

func (p *JankyArgs) ReadFieldArg(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *JankyArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Janky_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *JankyArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("arg", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "arg", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Arg))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "arg", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "arg", p.ThriftName(), err)
	}
	return err
}

func (p *JankyArgs) WriteFieldArg(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *JankyArgs) TStructName() string {
	return "JankyArgs"
}

func (p *JankyArgs) ThriftName() string {
	return "Janky_args"
}

func (p *JankyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JankyArgs(%+v)", *p)
}

func (p *JankyArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*JankyArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *JankyArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Arg
	}
	return nil
}

func (p *JankyArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("arg", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Success
 */
type JankyResult struct {
	Success int32 "success" // 0
}

var tstructJankyResult = thrift.NewTStruct("Janky_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
})

func (*JankyResult) GetTStruct() thrift.TStruct { return tstructJankyResult }
func NewJankyResult() *JankyResult {
	output := &JankyResult{}
	{
	}
	return output
}

func (p *JankyResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructJankyResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructJankyResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructJankyResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *JankyResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1579, err1580 := iprot.ReadI32()
	if err1580 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1580)
	}
	p.Success = v1579
	return err
}

func (p *JankyResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *JankyResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("Janky_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *JankyResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *JankyResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *JankyResult) TStructName() string {
	return "JankyResult"
}

func (p *JankyResult) ThriftName() string {
	return "Janky_result"
}

func (p *JankyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JankyResult(%+v)", *p)
}

func (p *JankyResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*JankyResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *JankyResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *JankyResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
	})
}

type VoidMethodArgs struct {
}

var tstructVoidMethodArgs = thrift.NewTStruct("voidMethod_args", []thrift.TField{})

func (*VoidMethodArgs) GetTStruct() thrift.TStruct { return tstructVoidMethodArgs }
func NewVoidMethodArgs() *VoidMethodArgs {
	output := &VoidMethodArgs{}
	{
	}
	return output
}

func (p *VoidMethodArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructVoidMethodArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructVoidMethodArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructVoidMethodArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *VoidMethodArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("voidMethod_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *VoidMethodArgs) TStructName() string {
	return "VoidMethodArgs"
}

func (p *VoidMethodArgs) ThriftName() string {
	return "voidMethod_args"
}

func (p *VoidMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VoidMethodArgs(%+v)", *p)
}

func (p *VoidMethodArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*VoidMethodArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *VoidMethodArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *VoidMethodArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

type VoidMethodResult struct {
}

var tstructVoidMethodResult = thrift.NewTStruct("voidMethod_result", []thrift.TField{})

func (*VoidMethodResult) GetTStruct() thrift.TStruct { return tstructVoidMethodResult }
func NewVoidMethodResult() *VoidMethodResult {
	output := &VoidMethodResult{}
	{
	}
	return output
}

func (p *VoidMethodResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructVoidMethodResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructVoidMethodResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructVoidMethodResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *VoidMethodResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("voidMethod_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *VoidMethodResult) TStructName() string {
	return "VoidMethodResult"
}

func (p *VoidMethodResult) ThriftName() string {
	return "voidMethod_result"
}

func (p *VoidMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VoidMethodResult(%+v)", *p)
}

func (p *VoidMethodResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*VoidMethodResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *VoidMethodResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *VoidMethodResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

type PrimitiveMethodArgs struct {
}

var tstructPrimitiveMethodArgs = thrift.NewTStruct("primitiveMethod_args", []thrift.TField{})

func (*PrimitiveMethodArgs) GetTStruct() thrift.TStruct { return tstructPrimitiveMethodArgs }
func NewPrimitiveMethodArgs() *PrimitiveMethodArgs {
	output := &PrimitiveMethodArgs{}
	{
	}
	return output
}

func (p *PrimitiveMethodArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrimitiveMethodArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructPrimitiveMethodArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructPrimitiveMethodArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveMethodArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("primitiveMethod_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveMethodArgs) TStructName() string {
	return "PrimitiveMethodArgs"
}

func (p *PrimitiveMethodArgs) ThriftName() string {
	return "primitiveMethod_args"
}

func (p *PrimitiveMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrimitiveMethodArgs(%+v)", *p)
}

func (p *PrimitiveMethodArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*PrimitiveMethodArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *PrimitiveMethodArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *PrimitiveMethodArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type PrimitiveMethodResult struct {
	Success int32 "success" // 0
}

var tstructPrimitiveMethodResult = thrift.NewTStruct("primitiveMethod_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
})

func (*PrimitiveMethodResult) GetTStruct() thrift.TStruct { return tstructPrimitiveMethodResult }
func NewPrimitiveMethodResult() *PrimitiveMethodResult {
	output := &PrimitiveMethodResult{}
	{
	}
	return output
}

func (p *PrimitiveMethodResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructPrimitiveMethodResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructPrimitiveMethodResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructPrimitiveMethodResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveMethodResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1581, err1582 := iprot.ReadI32()
	if err1582 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1582)
	}
	p.Success = v1581
	return err
}

func (p *PrimitiveMethodResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *PrimitiveMethodResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("primitiveMethod_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveMethodResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *PrimitiveMethodResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *PrimitiveMethodResult) TStructName() string {
	return "PrimitiveMethodResult"
}

func (p *PrimitiveMethodResult) ThriftName() string {
	return "primitiveMethod_result"
}

func (p *PrimitiveMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrimitiveMethodResult(%+v)", *p)
}

func (p *PrimitiveMethodResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*PrimitiveMethodResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *PrimitiveMethodResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *PrimitiveMethodResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
	})
}

type StructMethodArgs struct {
}

var tstructStructMethodArgs = thrift.NewTStruct("structMethod_args", []thrift.TField{})

func (*StructMethodArgs) GetTStruct() thrift.TStruct { return tstructStructMethodArgs }
func NewStructMethodArgs() *StructMethodArgs {
	output := &StructMethodArgs{}
	{
	}
	return output
}

func (p *StructMethodArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructMethodArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructStructMethodArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructStructMethodArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructMethodArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("structMethod_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructMethodArgs) TStructName() string {
	return "StructMethodArgs"
}

func (p *StructMethodArgs) ThriftName() string {
	return "structMethod_args"
}

func (p *StructMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructMethodArgs(%+v)", *p)
}

func (p *StructMethodArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*StructMethodArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StructMethodArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *StructMethodArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 */
type StructMethodResult struct {
	Success *CompactProtoTestStruct "success" // 0
}

var tstructStructMethodResult = thrift.NewTStruct("structMethod_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
})

func (*StructMethodResult) GetTStruct() thrift.TStruct { return tstructStructMethodResult }
func NewStructMethodResult() *StructMethodResult {
	output := &StructMethodResult{}
	{
	}
	return output
}

func (p *StructMethodResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructStructMethodResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructStructMethodResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructStructMethodResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 0 || fieldName == "success" {
			if fieldTypeId == thrift.STRUCT {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructMethodResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewCompactProtoTestStruct()
	err1585 := p.Success.Read(iprot)
	if err1585 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessCompactProtoTestStruct", err1585)
	}
	return err
}

func (p *StructMethodResult) ReadFieldSuccess(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField0(iprot)
}

func (p *StructMethodResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("structMethod_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	default:
		if err = p.WriteField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *StructMethodResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("CompactProtoTestStruct", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *StructMethodResult) WriteFieldSuccess(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField0(oprot)
}

func (p *StructMethodResult) TStructName() string {
	return "StructMethodResult"
}

func (p *StructMethodResult) ThriftName() string {
	return "structMethod_result"
}

func (p *StructMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructMethodResult(%+v)", *p)
}

func (p *StructMethodResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*StructMethodResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *StructMethodResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	}
	return nil
}

func (p *StructMethodResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
	})
}

/**
 * Attributes:
 *  - Something
 */
type MethodWithDefaultArgsArgs struct {
	Something int32 "something" // 1
}

var tstructMethodWithDefaultArgsArgs = thrift.NewTStruct("methodWithDefaultArgs_args", []thrift.TField{
	thrift.NewTField("something", thrift.I32, 1),
})

func (*MethodWithDefaultArgsArgs) GetTStruct() thrift.TStruct { return tstructMethodWithDefaultArgsArgs }
func NewMethodWithDefaultArgsArgs() *MethodWithDefaultArgsArgs {
	output := &MethodWithDefaultArgsArgs{}
	{
		output.Something = 2
	}
	return output
}

func (p *MethodWithDefaultArgsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMethodWithDefaultArgsArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructMethodWithDefaultArgsArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructMethodWithDefaultArgsArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if fieldId == 1 || fieldName == "something" {
			if fieldTypeId == thrift.I32 {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else if fieldTypeId == thrift.VOID {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = p.ReadField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		} else {
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodWithDefaultArgsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1586, err1587 := iprot.ReadI32()
	if err1587 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "something", p.ThriftName(), err1587)
	}
	p.Something = v1586
	return err
}

func (p *MethodWithDefaultArgsArgs) ReadFieldSomething(iprot thrift.TProtocol) thrift.TProtocolException {
	return p.ReadField1(iprot)
}

func (p *MethodWithDefaultArgsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("methodWithDefaultArgs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.WriteField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodWithDefaultArgsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("something", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "something", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Something))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "something", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "something", p.ThriftName(), err)
	}
	return err
}

func (p *MethodWithDefaultArgsArgs) WriteFieldSomething(oprot thrift.TProtocol) thrift.TProtocolException {
	return p.WriteField1(oprot)
}

func (p *MethodWithDefaultArgsArgs) TStructName() string {
	return "MethodWithDefaultArgsArgs"
}

func (p *MethodWithDefaultArgsArgs) ThriftName() string {
	return "methodWithDefaultArgs_args"
}

func (p *MethodWithDefaultArgsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MethodWithDefaultArgsArgs(%+v)", *p)
}

func (p *MethodWithDefaultArgsArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MethodWithDefaultArgsArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MethodWithDefaultArgsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Something
	}
	return nil
}

func (p *MethodWithDefaultArgsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("something", thrift.I32, 1),
	})
}

type MethodWithDefaultArgsResult struct {
}

var tstructMethodWithDefaultArgsResult = thrift.NewTStruct("methodWithDefaultArgs_result", []thrift.TField{})

func (*MethodWithDefaultArgsResult) GetTStruct() thrift.TStruct {
	return tstructMethodWithDefaultArgsResult
}
func NewMethodWithDefaultArgsResult() *MethodWithDefaultArgsResult {
	output := &MethodWithDefaultArgsResult{}
	{
	}
	return output
}

func (p *MethodWithDefaultArgsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMethodWithDefaultArgsResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructMethodWithDefaultArgsResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructMethodWithDefaultArgsResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodWithDefaultArgsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("methodWithDefaultArgs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MethodWithDefaultArgsResult) TStructName() string {
	return "MethodWithDefaultArgsResult"
}

func (p *MethodWithDefaultArgsResult) ThriftName() string {
	return "methodWithDefaultArgs_result"
}

func (p *MethodWithDefaultArgsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MethodWithDefaultArgsResult(%+v)", *p)
}

func (p *MethodWithDefaultArgsResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*MethodWithDefaultArgsResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *MethodWithDefaultArgsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *MethodWithDefaultArgsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

type OnewayMethodArgs struct {
}

var tstructOnewayMethodArgs = thrift.NewTStruct("onewayMethod_args", []thrift.TField{})

func (*OnewayMethodArgs) GetTStruct() thrift.TStruct { return tstructOnewayMethodArgs }
func NewOnewayMethodArgs() *OnewayMethodArgs {
	output := &OnewayMethodArgs{}
	{
	}
	return output
}

func (p *OnewayMethodArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructOnewayMethodArgs.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructOnewayMethodArgs.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructOnewayMethodArgs.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OnewayMethodArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("onewayMethod_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OnewayMethodArgs) TStructName() string {
	return "OnewayMethodArgs"
}

func (p *OnewayMethodArgs) ThriftName() string {
	return "onewayMethod_args"
}

func (p *OnewayMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnewayMethodArgs(%+v)", *p)
}

func (p *OnewayMethodArgs) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*OnewayMethodArgs)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *OnewayMethodArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *OnewayMethodArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

type OnewayMethodResult struct {
}

var tstructOnewayMethodResult = thrift.NewTStruct("onewayMethod_result", []thrift.TField{})

func (*OnewayMethodResult) GetTStruct() thrift.TStruct { return tstructOnewayMethodResult }
func NewOnewayMethodResult() *OnewayMethodResult {
	output := &OnewayMethodResult{}
	{
	}
	return output
}

func (p *OnewayMethodResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructOnewayMethodResult.FieldIdFromFieldName(fieldName))
		} else if fieldName == "" {
			fieldName = tstructOnewayMethodResult.FieldNameFromFieldId(int(fieldId))
		}
		if fieldTypeId == thrift.GENERIC {
			fieldTypeId = tstructOnewayMethodResult.FieldFromFieldId(int(fieldId)).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		err = iprot.Skip(fieldTypeId)
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OnewayMethodResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("onewayMethod_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *OnewayMethodResult) TStructName() string {
	return "OnewayMethodResult"
}

func (p *OnewayMethodResult) ThriftName() string {
	return "onewayMethod_result"
}

func (p *OnewayMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnewayMethodResult(%+v)", *p)
}

func (p *OnewayMethodResult) CompareTo(other interface{}) (int, bool) {
	if other == nil {
		return 1, true
	}
	data, ok := other.(*OnewayMethodResult)
	if !ok {
		return 0, false
	}
	return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *OnewayMethodResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *OnewayMethodResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}
